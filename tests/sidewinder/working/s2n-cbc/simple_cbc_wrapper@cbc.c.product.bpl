var $__delta: int;
var $l: int;
var $l.shadow: int;
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
var $M.0: [ref] i8;
var $M.0.shadow: [ref] i8;
var $M.1: [ref] i8;
var $M.1.shadow: [ref] i8;
var $M.2: [ref] i32;
var $M.2.shadow: [ref] i32;
var $M.3: [ref] i32;
var $M.3.shadow: [ref] i32;
var $M.4: [ref] i8;
var $M.4.shadow: [ref] i8;
var $M.5: [ref] ref;
var $M.5.shadow: [ref] ref;
var $M.6: [ref] i32;
var $M.6.shadow: [ref] i32;
var $M.7: [ref] i32;
var $M.7.shadow: [ref] i32;
var $M.8: [ref] i8;
var $M.8.shadow: [ref] i8;
var $M.9: [ref] i8;
var $M.9.shadow: [ref] i8;
var $M.10: [ref] i8;
var $M.10.shadow: [ref] i8;
axiom ($GLOBALS_BOTTOM == $sub.ref(0,73757));
axiom ($EXTERNS_BOTTOM == $sub.ref(0,32784));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1,p2) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1,p2) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1,p2) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1,p2) }
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1,p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1,p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1,p2) }
const {:count 44} .str.31: ref;
axiom (.str.31 == $sub.ref(0,1068));
const s2n_debug_str: ref;
axiom (s2n_debug_str == $sub.ref(0,32776));
const s2n_errno: ref;
axiom (s2n_errno == $sub.ref(0,32784));
const .str: ref;
axiom (.str == $sub.ref(0,2139));
const {:count 47} .str.10: ref;
axiom (.str.10 == $sub.ref(0,3210));
const {:count 47} .str.1: ref;
axiom (.str.1 == $sub.ref(0,4281));
const {:count 48} .str.2: ref;
axiom (.str.2 == $sub.ref(0,5353));
const {:count 48} .str.3: ref;
axiom (.str.3 == $sub.ref(0,6425));
const {:count 48} .str.4: ref;
axiom (.str.4 == $sub.ref(0,7497));
const {:count 48} .str.5: ref;
axiom (.str.5 == $sub.ref(0,8569));
const {:count 48} .str.6: ref;
axiom (.str.6 == $sub.ref(0,9641));
const {:count 48} .str.7: ref;
axiom (.str.7 == $sub.ref(0,10713));
const {:count 48} .str.8: ref;
axiom (.str.8 == $sub.ref(0,11785));
const {:count 48} .str.9: ref;
axiom (.str.9 == $sub.ref(0,12857));
const {:count 14} .str.2.15: ref;
axiom (.str.2.15 == $sub.ref(0,13895));
const {:count 14} .str.3.16: ref;
axiom (.str.3.16 == $sub.ref(0,14933));
const simple_cbc_wrapper: ref;
axiom (simple_cbc_wrapper == $sub.ref(0,15965));
procedure {:cost_modeling} {:inline 1} simple_cbc_wrapper($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
requires {:__VERIFIER_ASSERT_MAX_LEAKAGE 68} true;
requires {:public_in $i0} true;
requires {:public_in $i1} true;
requires {:public_in $i2} true;
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i8;
  var $i54: i8;
  var $i55: i8;
  var $i56: i8;
  var $i57: i32;
$bb0:
  $l := 0;
  call $initialize();
  assume {:sourceloc "cbc.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSERT_MAX_LEAKAGE(i32 68), !dbg !1768, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call {:cexpr "smack:entry:simple_cbc_wrapper"} boogie_si_record_ref(simple_cbc_wrapper);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$i0"} boogie_si_record_i32($i0);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$i1"} boogie_si_record_i32($i1);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$i2"} boogie_si_record_i32($i2);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$p3"} boogie_si_record_ref($p3);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$p4"} boogie_si_record_ref($p4);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = alloca %struct.s2n_hmac_state, align 4, !verifier.code !1745"} true;
  call $p5 := $alloc($mul.ref(240,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = alloca %struct.s2n_crypto_parameters, align 8, !verifier.code !1745"} true;
  call $p6 := $alloc($mul.ref(1152,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = alloca %struct.s2n_connection, align 8, !verifier.code !1745"} true;
  call $p7 := $alloc($mul.ref(4016,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = alloca [1024 x i32], align 16, !verifier.code !1745"} true;
  call $p8 := $alloc($mul.ref(4096,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = alloca %struct.s2n_blob, align 8, !verifier.code !1745"} true;
  call $p9 := $alloc($mul.ref(24,$zext.i32.i64(1)));
  assume {:sourceloc "cbc.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSERT_MAX_LEAKAGE(i32 68), !dbg !1768, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "cbc.c", 40, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %0), !dbg !1772, !verifier.code !1745"} true;
  call {:name $i0} $p10 := __SMACK_value.i32($i0);
  assume $isExternal($p10);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p10);
  assume {:sourceloc "cbc.c", 40, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %11), !dbg !1774, !verifier.code !1745"} true;
  assume {:sourceloc "cbc.c", 41, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = icmp sge i32 %0, 0, !dbg !1776, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i11 := $sge.i32($i0,0);
  assume {:sourceloc "cbc.c", 41, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %13 = zext i1 %12 to i32, !dbg !1776, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i12 := $zext.i1.i32($i11);
  assume {:sourceloc "cbc.c", 41, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %13), !dbg !1779, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i12);
  assume {:sourceloc "cbc.c", 42, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %14 = icmp slt i32 %0, 64, !dbg !1781, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i13 := $slt.i32($i0,64);
  assume {:sourceloc "cbc.c", 42, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %15 = zext i1 %14 to i32, !dbg !1781, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i14 := $zext.i1.i32($i13);
  assume {:sourceloc "cbc.c", 42, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %15), !dbg !1784, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i14);
  assume {:sourceloc "cbc.c", 44, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %1), !dbg !1786, !verifier.code !1745"} true;
  call {:name $i1} $p15 := __SMACK_value.i32($i1);
  assume $isExternal($p15);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p15);
  assume {:sourceloc "cbc.c", 44, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %16), !dbg !1788, !verifier.code !1745"} true;
  assume true;
  assume {:sourceloc "cbc.c", 46, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = bitcast %struct.s2n_hmac_state* %6 to i8*, !dbg !1791, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p16 := $bitcast.ref.ref($p5);
  assume {:sourceloc "cbc.c", 46, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 240, i32 4, i1 false), !dbg !1791, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  call $M.1 := $memset.i8($M.1, $p16, 0, 240, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 0, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p17 := $p5;
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %18, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p17,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 1, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p18 := $add.ref($p5,4);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 64, i16* %19, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i16($M.1,$p18,64);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 2, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p19 := $add.ref($p5,8);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 0, i32* %20, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p19,0);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 3, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p20 := $add.ref($p5,12);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 64, i16* %21, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i16($M.1,$p20,64);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p21 := $add.ref($p5,14);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 20, i8* %22, align 2, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i8($M.1,$p21,20);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 5, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p22 := $add.ref($p5,16);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 5, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p23 := $add.ref($p5,16);
  assume {:sourceloc "cbc.c", 52, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %24, align 4, !dbg !1808, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p23,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 6, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p24 := $add.ref($p5,24);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 6, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p25 := $add.ref($p5,24);
  assume {:sourceloc "cbc.c", 54, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %26, align 4, !dbg !1812, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p25,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 7, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p26 := $add.ref($p5,32);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 7, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p27 := $add.ref($p5,32);
  assume {:sourceloc "cbc.c", 56, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %28, align 4, !dbg !1816, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p27,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 8, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p28 := $add.ref($p5,40);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 8, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p29 := $add.ref($p5,40);
  assume {:sourceloc "cbc.c", 58, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %30, align 4, !dbg !1820, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p29,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %31 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 9, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p30 := $add.ref($p5,48);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 9, i64 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p31 := $add.ref($p5,48);
  assume {:sourceloc "cbc.c", 60, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = load i32, i32* %3, align 4, !dbg !1824, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i32 := $load.i32($M.2,$p3);
  assume {:sourceloc "cbc.c", 60, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = trunc i32 %33 to i8, !dbg !1824, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i33 := $trunc.i32.i8($i32);
  assume {:sourceloc "cbc.c", 60, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %34, i8* %32, align 1, !dbg !1824, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i8($M.1,$p31,$i33);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 10, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p34 := $add.ref($p5,176);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %36 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 10, i64 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p35 := $add.ref($p5,176);
  assume {:sourceloc "cbc.c", 62, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %37 = load i32, i32* %4, align 4, !dbg !1830, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i36 := $load.i32($M.3,$p4);
  assume {:sourceloc "cbc.c", 62, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %38 = trunc i32 %37 to i8, !dbg !1830, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i37 := $trunc.i32.i8($i36);
  assume {:sourceloc "cbc.c", 62, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %38, i8* %36, align 1, !dbg !1830, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i8($M.1,$p35,$i37);
  assume true;
  assume true;
  assume {:sourceloc "cbc.c", 67, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %39 = bitcast %struct.s2n_connection* %8 to i8*, !dbg !1838, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p38 := $bitcast.ref.ref($p7);
  assume {:sourceloc "cbc.c", 67, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @llvm.memset.p0i8.i64(i8* %39, i8 0, i64 4016, i32 8, i1 false), !dbg !1838, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  call $M.4 := $memset.i8($M.4, $p38, 0, 4016, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %40 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %8, i32 0, i32 8, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p39 := $add.ref($p7,52);
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 0, i32* %40, align 4, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.4 := $store.i32($M.4,$p39,0);
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %8, i32 0, i32 21, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p40 := $add.ref($p7,2424);
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store %struct.s2n_crypto_parameters* %7, %struct.s2n_crypto_parameters** %41, align 8, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.4 := $store.ref($M.4,$p40,$p6);
  assume true;
  assume {:sourceloc "cbc.c", 77, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %42 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %2), !dbg !1853, !verifier.code !1745"} true;
  call {:name $i2} $p41 := __SMACK_value.i32($i2);
  assume $isExternal($p41);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p41);
  assume {:sourceloc "cbc.c", 77, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %42), !dbg !1855, !verifier.code !1745"} true;
  assume {:sourceloc "cbc.c", 78, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %43 = icmp sge i32 %2, 0, !dbg !1857, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i42 := $sge.i32($i2,0);
  assume {:sourceloc "cbc.c", 78, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %44 = zext i1 %43 to i32, !dbg !1857, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i43 := $zext.i1.i32($i42);
  assume {:sourceloc "cbc.c", 78, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %44), !dbg !1860, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i43);
  assume {:sourceloc "cbc.c", 79, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %45 = icmp sle i32 %2, 1024, !dbg !1862, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i44 := $sle.i32($i2,1024);
  assume {:sourceloc "cbc.c", 79, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %46 = zext i1 %45 to i32, !dbg !1862, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i45 := $zext.i1.i32($i44);
  assume {:sourceloc "cbc.c", 79, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %46), !dbg !1865, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i45);
  assume true;
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 0, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p46 := $p9;
  assume {:sourceloc "cbc.c", 82, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %48 = getelementptr inbounds [1024 x i32], [1024 x i32]* %9, i32 0, i32 0, !dbg !1872, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p47 := $p8;
  assume {:sourceloc "cbc.c", 82, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %49 = bitcast i32* %48 to i8*, !dbg !1872, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p48 := $bitcast.ref.ref($p47);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8* %49, i8** %47, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.5 := $store.ref($M.5,$p46,$p8);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %50 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 1, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p49 := $add.ref($p9,8);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %2, i32* %50, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.6 := $store.i32($M.6,$p49,$i2);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %51 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 2, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p50 := $add.ref($p9,12);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 1, i32* %51, align 4, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.7 := $store.i32($M.7,$p50,1);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %52 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 3, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p51 := $add.ref($p9,16);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %53 = trunc i32 %1 to i8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i52 := $trunc.i32.i8($i1);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %54 = load i8, i8* %52, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i53 := $load.i8($M.8,$p51);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %55 = and i8 %53, 1, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i54 := $and.i8($i52,1);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %56 = and i8 %54, -2, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i55 := $and.i8($i53,$sub.i8(0,2));
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %57 = or i8 %56, %55, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i56 := $or.i8($i55,$i54);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %57, i8* %52, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.8 := $store.i8($M.8,$p51,$i56);
  assume {:sourceloc "cbc.c", 88, 10} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %58 = call i32 @s2n_verify_cbc(%struct.s2n_connection* %8, %struct.s2n_hmac_state* %6, %struct.s2n_blob* %10), !dbg !1887, !verifier.code !1745"} true;
  call $i57 := s2n_verify_cbc($p7, $p5, $p9);
  assume {:sourceloc "cbc.c", 88, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %58, !dbg !1889, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := $i57;
  $exn := false;
  return;
}
procedure {:entrypoint} {:cost_modeling} simple_cbc_wrapper.wrapper($i0: i32, $i0.shadow: i32, $i1: i32, $i1.shadow: i32, $i2: i32, $i2.shadow: i32, $p3: ref, $p3.shadow: ref, $p4: ref, $p4.shadow: ref) returns ($r: i32, $r.shadow: i32)
requires {:__VERIFIER_ASSERT_MAX_LEAKAGE 68} true;
requires {:public_in $i0} true;
requires {:public_in $i1} true;
requires {:public_in $i2} true;
requires ($i0 == $i0.shadow);
requires ($i1 == $i1.shadow);
requires ($i2 == $i2.shadow);
{
  
  call $r := simple_cbc_wrapper($i0, $i1, $i2, $p3, $p4);
  call $r.shadow := simple_cbc_wrapper.shadow($i0.shadow, $i1.shadow, $i2.shadow, $p3.shadow, $p4.shadow);
  assume ($l >= $l.shadow);
  $__delta := ($l - $l.shadow);
  assert ($l <= ($l.shadow + 68));
  return;
}
procedure {:cost_modeling} {:inline 1} simple_cbc_wrapper.shadow($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
requires {:__VERIFIER_ASSERT_MAX_LEAKAGE 68} true;
requires {:public_in $i0} true;
requires {:public_in $i1} true;
requires {:public_in $i2} true;
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i8;
  var $i54: i8;
  var $i55: i8;
  var $i56: i8;
  var $i57: i32;
$bb0:
  $l.shadow := 0;
  call $initialize.shadow();
  assume {:sourceloc "cbc.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSERT_MAX_LEAKAGE(i32 68), !dbg !1768, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call {:cexpr "smack:entry:simple_cbc_wrapper"} boogie_si_record_ref(simple_cbc_wrapper);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$i0"} boogie_si_record_i32($i0);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$i1"} boogie_si_record_i32($i1);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$i2"} boogie_si_record_i32($i2);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$p3"} boogie_si_record_ref($p3);
  call {:cexpr "smack:arg:simple_cbc_wrapper:$p4"} boogie_si_record_ref($p4);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = alloca %struct.s2n_hmac_state, align 4, !verifier.code !1745"} true;
  call $p5 := $alloc($mul.ref(240,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = alloca %struct.s2n_crypto_parameters, align 8, !verifier.code !1745"} true;
  call $p6 := $alloc($mul.ref(1152,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = alloca %struct.s2n_connection, align 8, !verifier.code !1745"} true;
  call $p7 := $alloc($mul.ref(4016,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = alloca [1024 x i32], align 16, !verifier.code !1745"} true;
  call $p8 := $alloc($mul.ref(4096,$zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = alloca %struct.s2n_blob, align 8, !verifier.code !1745"} true;
  call $p9 := $alloc($mul.ref(24,$zext.i32.i64(1)));
  assume {:sourceloc "cbc.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSERT_MAX_LEAKAGE(i32 68), !dbg !1768, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "cbc.c", 40, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %0), !dbg !1772, !verifier.code !1745"} true;
  call {:name $i0} $p10 := __SMACK_value.i32($i0);
  assume $isExternal($p10);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p10);
  assume {:sourceloc "cbc.c", 40, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %11), !dbg !1774, !verifier.code !1745"} true;
  assume {:sourceloc "cbc.c", 41, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = icmp sge i32 %0, 0, !dbg !1776, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i11 := $sge.i32($i0,0);
  assume {:sourceloc "cbc.c", 41, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %13 = zext i1 %12 to i32, !dbg !1776, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i12 := $zext.i1.i32($i11);
  assume {:sourceloc "cbc.c", 41, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %13), !dbg !1779, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i12);
  assume {:sourceloc "cbc.c", 42, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %14 = icmp slt i32 %0, 64, !dbg !1781, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i13 := $slt.i32($i0,64);
  assume {:sourceloc "cbc.c", 42, 45} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %15 = zext i1 %14 to i32, !dbg !1781, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i14 := $zext.i1.i32($i13);
  assume {:sourceloc "cbc.c", 42, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %15), !dbg !1784, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i14);
  assume {:sourceloc "cbc.c", 44, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %1), !dbg !1786, !verifier.code !1745"} true;
  call {:name $i1} $p15 := __SMACK_value.i32($i1);
  assume $isExternal($p15);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p15);
  assume {:sourceloc "cbc.c", 44, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %16), !dbg !1788, !verifier.code !1745"} true;
  assume true;
  assume {:sourceloc "cbc.c", 46, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = bitcast %struct.s2n_hmac_state* %6 to i8*, !dbg !1791, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p16 := $bitcast.ref.ref($p5);
  assume {:sourceloc "cbc.c", 46, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 240, i32 4, i1 false), !dbg !1791, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  call $M.1.shadow := $memset.i8.shadow($M.1.shadow, $p16, 0, 240, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 0, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p17 := $p5;
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %18, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p17,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 1, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p18 := $add.ref($p5,4);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 64, i16* %19, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i16($M.1.shadow,$p18,64);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 2, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p19 := $add.ref($p5,8);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 0, i32* %20, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p19,0);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 3, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p20 := $add.ref($p5,12);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 64, i16* %21, align 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i16($M.1.shadow,$p20,64);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 4, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p21 := $add.ref($p5,14);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 20, i8* %22, align 2, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i8($M.1.shadow,$p21,20);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 5, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p22 := $add.ref($p5,16);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 5, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p23 := $add.ref($p5,16);
  assume {:sourceloc "cbc.c", 52, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %24, align 4, !dbg !1808, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p23,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 6, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p24 := $add.ref($p5,24);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 6, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p25 := $add.ref($p5,24);
  assume {:sourceloc "cbc.c", 54, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %26, align 4, !dbg !1812, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p25,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 7, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p26 := $add.ref($p5,32);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 7, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p27 := $add.ref($p5,32);
  assume {:sourceloc "cbc.c", 56, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %28, align 4, !dbg !1816, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p27,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 8, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p28 := $add.ref($p5,40);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 8, i32 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p29 := $add.ref($p5,40);
  assume {:sourceloc "cbc.c", 58, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 2, i32* %30, align 4, !dbg !1820, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p29,2);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %31 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 9, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p30 := $add.ref($p5,48);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 9, i64 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p31 := $add.ref($p5,48);
  assume {:sourceloc "cbc.c", 60, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = load i32, i32* %3, align 4, !dbg !1824, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i32 := $load.i32($M.2.shadow,$p3);
  assume {:sourceloc "cbc.c", 60, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = trunc i32 %33 to i8, !dbg !1824, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i33 := $trunc.i32.i8($i32);
  assume {:sourceloc "cbc.c", 60, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %34, i8* %32, align 1, !dbg !1824, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i8($M.1.shadow,$p31,$i33);
  assume {:sourceloc "cbc.c", 46, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 10, !dbg !1795, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p34 := $add.ref($p5,176);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %36 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %6, i32 0, i32 10, i64 0, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p35 := $add.ref($p5,176);
  assume {:sourceloc "cbc.c", 62, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %37 = load i32, i32* %4, align 4, !dbg !1830, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i36 := $load.i32($M.3.shadow,$p4);
  assume {:sourceloc "cbc.c", 62, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %38 = trunc i32 %37 to i8, !dbg !1830, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i37 := $trunc.i32.i8($i36);
  assume {:sourceloc "cbc.c", 62, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %38, i8* %36, align 1, !dbg !1830, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i8($M.1.shadow,$p35,$i37);
  assume true;
  assume true;
  assume {:sourceloc "cbc.c", 67, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %39 = bitcast %struct.s2n_connection* %8 to i8*, !dbg !1838, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p38 := $bitcast.ref.ref($p7);
  assume {:sourceloc "cbc.c", 67, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @llvm.memset.p0i8.i64(i8* %39, i8 0, i64 4016, i32 8, i1 false), !dbg !1838, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  call $M.4.shadow := $memset.i8.shadow($M.4.shadow, $p38, 0, 4016, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %40 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %8, i32 0, i32 8, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p39 := $add.ref($p7,52);
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 0, i32* %40, align 4, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.4.shadow := $store.i32($M.4.shadow,$p39,0);
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %8, i32 0, i32 21, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p40 := $add.ref($p7,2424);
  assume {:sourceloc "cbc.c", 67, 32} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store %struct.s2n_crypto_parameters* %7, %struct.s2n_crypto_parameters** %41, align 8, !dbg !1842, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.4.shadow := $store.ref($M.4.shadow,$p40,$p6);
  assume true;
  assume {:sourceloc "cbc.c", 77, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %42 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %2), !dbg !1853, !verifier.code !1745"} true;
  call {:name $i2} $p41 := __SMACK_value.i32($i2);
  assume $isExternal($p41);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p41);
  assume {:sourceloc "cbc.c", 77, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %42), !dbg !1855, !verifier.code !1745"} true;
  assume {:sourceloc "cbc.c", 78, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %43 = icmp sge i32 %2, 0, !dbg !1857, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i42 := $sge.i32($i2,0);
  assume {:sourceloc "cbc.c", 78, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %44 = zext i1 %43 to i32, !dbg !1857, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i43 := $zext.i1.i32($i42);
  assume {:sourceloc "cbc.c", 78, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %44), !dbg !1860, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i43);
  assume {:sourceloc "cbc.c", 79, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %45 = icmp sle i32 %2, 1024, !dbg !1862, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i44 := $sle.i32($i2,1024);
  assume {:sourceloc "cbc.c", 79, 26} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %46 = zext i1 %45 to i32, !dbg !1862, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i45 := $zext.i1.i32($i44);
  assume {:sourceloc "cbc.c", 79, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %46), !dbg !1865, !verifier.code !1769"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i45);
  assume true;
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 0, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p46 := $p9;
  assume {:sourceloc "cbc.c", 82, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %48 = getelementptr inbounds [1024 x i32], [1024 x i32]* %9, i32 0, i32 0, !dbg !1872, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p47 := $p8;
  assume {:sourceloc "cbc.c", 82, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %49 = bitcast i32* %48 to i8*, !dbg !1872, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p48 := $bitcast.ref.ref($p47);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8* %49, i8** %47, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.5.shadow := $store.ref($M.5.shadow,$p46,$p8);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %50 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 1, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p49 := $add.ref($p9,8);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %2, i32* %50, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.6.shadow := $store.i32($M.6.shadow,$p49,$i2);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %51 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 2, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p50 := $add.ref($p9,12);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 1, i32* %51, align 4, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.7.shadow := $store.i32($M.7.shadow,$p50,1);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %52 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %10, i32 0, i32 3, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p51 := $add.ref($p9,16);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %53 = trunc i32 %1 to i8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i52 := $trunc.i32.i8($i1);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %54 = load i8, i8* %52, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i53 := $load.i8($M.8.shadow,$p51);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %55 = and i8 %53, 1, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i54 := $and.i8($i52,1);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %56 = and i8 %54, -2, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i55 := $and.i8($i53,$sub.i8(0,2));
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %57 = or i8 %56, %55, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i56 := $or.i8($i55,$i54);
  assume {:sourceloc "cbc.c", 81, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %57, i8* %52, align 8, !dbg !1870, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.8.shadow := $store.i8($M.8.shadow,$p51,$i56);
  assume {:sourceloc "cbc.c", 88, 10} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %58 = call i32 @s2n_verify_cbc(%struct.s2n_connection* %8, %struct.s2n_hmac_state* %6, %struct.s2n_blob* %10), !dbg !1887, !verifier.code !1745"} true;
  call $i57 := s2n_verify_cbc.shadow($p7, $p5, $p9);
  assume {:sourceloc "cbc.c", 88, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %58, !dbg !1889, !verifier.code !1745"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := $i57;
  $exn.shadow := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0,16997));
const __VERIFIER_ASSERT_MAX_LEAKAGE: ref;
axiom (__VERIFIER_ASSERT_MAX_LEAKAGE == $sub.ref(0,18029));
const __SMACK_value: ref;
axiom (__SMACK_value == $sub.ref(0,19061));
procedure {:inline 1} __SMACK_value.i32(p.0: i32) returns ($r: ref);
const public_in: ref;
axiom (public_in == $sub.ref(0,20093));
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0,21125));
const s2n_verify_cbc: ref;
axiom (s2n_verify_cbc == $sub.ref(0,22157));
procedure {:inline 1} {:cost_modeling} s2n_verify_cbc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p10: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i91: i32;
  var $i90: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
$bb0:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = alloca [64 x i8], align 16, !verifier.code !1744"} true;
  call $p3 := $alloc($mul.ref(64,$zext.i32.i64(1)));
  assume {:sourceloc "tls/s2n_cbc.c", 73, 42} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %0, i32 0, i32 21, !dbg !1757, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p4 := $add.ref($p0,2424);
  assume {:sourceloc "tls/s2n_cbc.c", 73, 42} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = load %struct.s2n_crypto_parameters*, %struct.s2n_crypto_parameters** %5, align 8, !dbg !1757, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $p5 := $load.ref($M.4,$p4);
  assume {:sourceloc "tls/s2n_cbc.c", 73, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = getelementptr inbounds %struct.s2n_crypto_parameters, %struct.s2n_crypto_parameters* %6, i32 0, i32 23, !dbg !1761, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p6 := $add.ref($p5,896);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 15} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %0, i32 0, i32 8, !dbg !1766, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p7 := $add.ref($p0,52);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 15} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = load i32, i32* %8, align 4, !dbg !1766, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i8 := $load.i32($M.4,$p7);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = icmp eq i32 %9, 1, !dbg !1770, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i9 := $eq.i32($i8,1);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %10, label %11, label %15, !dbg !1772, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p10 := $p6;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 75, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %0, i32 0, i32 22, !dbg !1774, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p11 := $add.ref($p0,2432);
  assume {:sourceloc "tls/s2n_cbc.c", 75, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = load %struct.s2n_crypto_parameters*, %struct.s2n_crypto_parameters** %12, align 8, !dbg !1774, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $p12 := $load.ref($M.4,$p11);
  assume {:sourceloc "tls/s2n_cbc.c", 75, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_crypto_parameters, %struct.s2n_crypto_parameters* %13, i32 0, i32 23, !dbg !1778, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p13 := $add.ref($p12,896);
  assume {:sourceloc "tls/s2n_cbc.c", 76, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %15, !dbg !1781, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p10 := $p13;
  goto $bb3;
$bb2:
  assume {:sourceloc "tls/s2n_cbc.c", 74, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %10, label %11, label %15, !dbg !1772, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume !($i9 == 1);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.01 = phi %struct.s2n_hmac_state* [ %14, %11 ], [ %7, %3 ], !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %16 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p14 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %17 = load i32, i32* %16, align 8, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i15 := $load.i32($M.6,$p14);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %18 = zext i8 20 to i32, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i16 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %19 = icmp ugt i32 %17, %18, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i17 := $ugt.i32($i15,$i16);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %20 = zext i1 %19 to i32, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i18 := $zext.i1.i32($i17);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %20), !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i18);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 47} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1795, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p19 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 47} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = load i32, i32* %21, align 8, !dbg !1795, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i20 := $load.i32($M.6,$p19);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = zext i8 20 to i32, !dbg !1798, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i21 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 52} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = sub i32 %22, %23, !dbg !1800, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i22 := $sub.i32($i20,$i21);
  call {:cexpr "payload_and_padding_size"} boogie_si_record_i32($i22);
  assume {:sourceloc "tls/s2n_cbc.c", 86, 48} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %25 = icmp sle i32 %24, 1004, !dbg !1805, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i23 := $sle.i32($i22,1004);
  assume {:sourceloc "tls/s2n_cbc.c", 86, 48} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = zext i1 %25 to i32, !dbg !1805, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i24 := $zext.i1.i32($i23);
  assume {:sourceloc "tls/s2n_cbc.c", 86, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %26), !dbg !1808, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assert($i24);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 57} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1810, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p25 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 57} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = load i32, i32* %27, align 8, !dbg !1810, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i26 := $load.i32($M.6,$p25);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 62} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = sub i32 %28, 1, !dbg !1813, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i27 := $sub.i32($i26,1);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = zext i32 %29 to i64, !dbg !1815, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i28 := $zext.i32.i64($i27);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %31 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1817, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p29 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 89, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = load i8*, i8** %31, align 8, !dbg !1817, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $p30 := $load.ref($M.5,$p29);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = getelementptr inbounds i8, i8* %32, i64 %30, !dbg !1815, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p31 := $add.ref($p30,$mul.ref($i28,1));
  assume {:sourceloc "tls/s2n_cbc.c", 89, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = load i8, i8* %33, align 1, !dbg !1815, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i32 := $load.i8($M.9,$p31);
  call {:cexpr "padding_length"} boogie_si_record_i8($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 23} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %35 = zext i8 %34 to i32, !dbg !1825, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i33 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %36 = icmp sge i32 %35, 0, !dbg !1827, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i34 := $sge.i32($i33,0);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %37 = zext i1 %36 to i32, !dbg !1827, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i35 := $zext.i1.i32($i34);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %37), !dbg !1830, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i35);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 23} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %38 = zext i8 %34 to i32, !dbg !1832, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i36 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %39 = icmp slt i32 %38, 256, !dbg !1834, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i37 := $slt.i32($i36,256);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %40 = zext i1 %39 to i32, !dbg !1834, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i38 := $zext.i1.i32($i37);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %40), !dbg !1837, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i38);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = zext i8 %34 to i32, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i39 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %42 = sub nsw i32 %24, %41, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i40 := $sub.i32($i22,$i39);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %43 = sub nsw i32 %42, 1, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i41 := $sub.i32($i40,1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %44 = icmp sgt i32 %43, 0, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i42 := $sgt.i32($i41,0);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %44, label %45, label %49, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:branchcond $i42} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i42 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %46 = zext i8 %34 to i32, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i43 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = sub nsw i32 %24, %46, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i44 := $sub.i32($i22,$i43);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %48 = sub nsw i32 %47, 1, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i45 := $sub.i32($i44,1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %50, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i46 := $i45;
  goto $bb6;
$bb5:
  assume !($i42 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %50, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i46 := 0;
  goto $bb6;
$bb6:
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %51 = phi i32 [ %48, %45 ], [ 0, %49 ], !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %52 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1853, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p47 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %53 = load i8*, i8** %52, align 8, !dbg !1853, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $p48 := $load.ref($M.5,$p47);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %54 = call i32 @s2n_hmac_update(%struct.s2n_hmac_state* %1, i8* %53, i32 %51), !dbg !1853, !verifier.code !1744"} true;
  call $i49 := s2n_hmac_update($p1, $p48, $i46);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %55 = icmp sge i32 %54, 0, !dbg !1853, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i50 := $sge.i32($i49,0);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %56 = zext i1 %55 to i32, !dbg !1853, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i51 := $zext.i1.i32($i50);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %56), !dbg !1853, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i51);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %57 = call i32 @s2n_hmac_copy(%struct.s2n_hmac_state* %.01, %struct.s2n_hmac_state* %1), !dbg !1860, !verifier.code !1744"} true;
  call $i52 := s2n_hmac_copy($p10, $p1);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %58 = icmp sge i32 %57, 0, !dbg !1860, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i53 := $sge.i32($i52,0);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %59 = zext i1 %58 to i32, !dbg !1860, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i54 := $zext.i1.i32($i53);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %59), !dbg !1860, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i54);
  assume true;
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %60 = zext i8 20 to i64, !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i55 := $zext.i8.i64(20);
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %61 = icmp ule i64 %60, 64, !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i56 := $ule.i64($i55,64);
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %62 = zext i1 %61 to i32, !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i57 := $zext.i1.i32($i56);
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %62), !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i57);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %63 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0, !dbg !1873, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p58 := $p3;
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %64 = zext i8 20 to i32, !dbg !1873, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i59 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %65 = call i32 @s2n_hmac_digest_two_compression_rounds(%struct.s2n_hmac_state* %1, i8* %63, i32 %64), !dbg !1873, !verifier.code !1744"} true;
  call $i60 := s2n_hmac_digest_two_compression_rounds($p1, $p58, $i59);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %66 = icmp sge i32 %65, 0, !dbg !1873, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i61 := $sge.i32($i60,0);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %67 = zext i1 %66 to i32, !dbg !1873, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i62 := $zext.i1.i32($i61);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %67), !dbg !1873, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i62);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 58} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %68 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1880, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p63 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 104, 58} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %69 = load i8*, i8** %68, align 8, !dbg !1880, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $p64 := $load.ref($M.5,$p63);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 63} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %70 = sext i32 %51 to i64, !dbg !1883, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i65 := $sext.i32.i64($i46);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 63} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %71 = getelementptr inbounds i8, i8* %69, i64 %70, !dbg !1883, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p66 := $add.ref($p64,$mul.ref($i65,1));
  assume {:sourceloc "tls/s2n_cbc.c", 104, 81} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %72 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0, !dbg !1886, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p67 := $p3;
  assume {:sourceloc "tls/s2n_cbc.c", 104, 95} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %73 = zext i8 20 to i32, !dbg !1888, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i68 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %74 = call i32 @s2n_constant_time_equals(i8* %71, i8* %72, i32 %73), !dbg !1890, !verifier.code !1744"} true;
  call $i69 := s2n_constant_time_equals($p66, $p67, $i68);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 112} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %75 = xor i32 %74, 1, !dbg !1892, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i70 := $xor.i32($i69,1);
  call {:cexpr "mismatches"} boogie_si_record_i32($i70);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %76 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p71 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %77 = load i8*, i8** %76, align 8, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $p72 := $load.ref($M.5,$p71);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %78 = sext i32 %51 to i64, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i73 := $sext.i32.i64($i46);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %79 = getelementptr inbounds i8, i8* %77, i64 %78, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p74 := $add.ref($p72,$mul.ref($i73,1));
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %80 = zext i8 20 to i32, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i75 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %81 = sext i32 %80 to i64, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i76 := $sext.i32.i64($i75);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.sum = add i64 %78, %81, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i77 := $add.i64($i73,$i76);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %82 = getelementptr inbounds i8, i8* %77, i64 %.sum, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p78 := $add.ref($p72,$mul.ref($i77,1));
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %83 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p79 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %84 = load i32, i32* %83, align 8, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i80 := $load.i32($M.6,$p79);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %85 = sub i32 %84, %51, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i81 := $sub.i32($i80,$i46);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %86 = zext i8 20 to i32, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i82 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %87 = sub i32 %85, %86, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i83 := $sub.i32($i81,$i82);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %88 = sub i32 %87, 1, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i84 := $sub.i32($i83,1);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %89 = call i32 @s2n_hmac_update(%struct.s2n_hmac_state* %.01, i8* %82, i32 %88), !dbg !1897, !verifier.code !1744"} true;
  call $i85 := s2n_hmac_update($p10, $p78, $i84);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %90 = icmp sge i32 %89, 0, !dbg !1897, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i86 := $sge.i32($i85,0);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %91 = zext i1 %90 to i32, !dbg !1897, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i87 := $zext.i1.i32($i86);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %91), !dbg !1897, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i87);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %92 = sub nsw i32 %24, 1, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i88 := $sub.i32($i22,1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %93 = icmp slt i32 255, %92, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i89 := $slt.i32(255,$i88);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %93, label %94, label %95, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:branchcond $i89} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i89 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %97, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i90 := 255;
  goto $bb9;
$bb8:
  assume !($i89 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %96 = sub nsw i32 %24, 1, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i91 := $sub.i32($i22,1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %97, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i90 := $i91;
  goto $bb9;
$bb9:
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %98 = phi i32 [ 255, %94 ], [ %96, %95 ], !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "tls/s2n_cbc.c", 117, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %99 = zext i8 %34 to i32, !dbg !1926, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i92 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 117, 24} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %100 = sub nsw i32 %98, %99, !dbg !1928, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i93 := $sub.i32($i90,$i92);
  call {:cexpr "cutoff"} boogie_si_record_i32($i93);
  assume {:sourceloc "tls/s2n_cbc.c", 118, 68} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %101 = zext i8 %34 to i32, !dbg !1933, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i94 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 118, 18} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %102 = call i32 @double_loop(i32 %75, %struct.s2n_blob* %2, i32 %98, i32 %100, i32 %101), !dbg !1935, !verifier.code !1744"} true;
  call $i95 := double_loop($i70, $p2, $i90, $i93, $i94);
  call {:cexpr "mismatches"} boogie_si_record_i32($i95);
  assume {:sourceloc "tls/s2n_cbc.c", 126, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %103 = icmp ne i32 %102, 0, !dbg !1938, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i96 := $ne.i32($i95,0);
  assume {:sourceloc "tls/s2n_cbc.c", 126, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %103, label %104, label %109, !dbg !1941, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:branchcond $i96} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i96 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %105, !dbg !1943, !llvm.loop !1945, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  goto $bb13;
$bb11:
  assume {:sourceloc "tls/s2n_cbc.c", 126, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %103, label %104, label %109, !dbg !1941, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume !($i96 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "tls/s2n_cbc.c", 130, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %110, !dbg !1959, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i97 := 0;
  goto $bb16;
$bb13:
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %106, !dbg !1947, !llvm.loop !1949, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  goto $bb14;
$bb14:
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.31, i32 0, i32 0), i8** @s2n_debug_str, align 8, !dbg !1951, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.0 := $store.ref($M.0,s2n_debug_str,.str.31);
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 335544343, i32* @s2n_errno, align 4, !dbg !1951, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.0 := $store.i32($M.0,s2n_errno,335544343);
  call {:cexpr "s2n_errno"} boogie_si_record_i32(335544343);
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %107, !dbg !1951, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  goto $bb15;
$bb15:
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %110, !dbg !1947, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i97 := $sub.i32(0,1);
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ -1, %107 ], [ 0, %109 ], !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "tls/s2n_cbc.c", 131, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.0, !dbg !1962, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := $i97;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_verify_cbc.shadow($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p10: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i91: i32;
  var $i90: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
$bb0:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = alloca [64 x i8], align 16, !verifier.code !1744"} true;
  call $p3 := $alloc($mul.ref(64,$zext.i32.i64(1)));
  assume {:sourceloc "tls/s2n_cbc.c", 73, 42} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %0, i32 0, i32 21, !dbg !1757, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p4 := $add.ref($p0,2424);
  assume {:sourceloc "tls/s2n_cbc.c", 73, 42} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = load %struct.s2n_crypto_parameters*, %struct.s2n_crypto_parameters** %5, align 8, !dbg !1757, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $p5 := $load.ref($M.4.shadow,$p4);
  assume {:sourceloc "tls/s2n_cbc.c", 73, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = getelementptr inbounds %struct.s2n_crypto_parameters, %struct.s2n_crypto_parameters* %6, i32 0, i32 23, !dbg !1761, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p6 := $add.ref($p5,896);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 15} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %0, i32 0, i32 8, !dbg !1766, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p7 := $add.ref($p0,52);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 15} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = load i32, i32* %8, align 4, !dbg !1766, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i8 := $load.i32($M.4.shadow,$p7);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = icmp eq i32 %9, 1, !dbg !1770, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i9 := $eq.i32($i8,1);
  assume {:sourceloc "tls/s2n_cbc.c", 74, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %10, label %11, label %15, !dbg !1772, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p10 := $p6;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 75, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = getelementptr inbounds %struct.s2n_connection, %struct.s2n_connection* %0, i32 0, i32 22, !dbg !1774, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p11 := $add.ref($p0,2432);
  assume {:sourceloc "tls/s2n_cbc.c", 75, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = load %struct.s2n_crypto_parameters*, %struct.s2n_crypto_parameters** %12, align 8, !dbg !1774, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $p12 := $load.ref($M.4.shadow,$p11);
  assume {:sourceloc "tls/s2n_cbc.c", 75, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_crypto_parameters, %struct.s2n_crypto_parameters* %13, i32 0, i32 23, !dbg !1778, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p13 := $add.ref($p12,896);
  assume {:sourceloc "tls/s2n_cbc.c", 76, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %15, !dbg !1781, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p10 := $p13;
  goto $bb3;
$bb2:
  assume {:sourceloc "tls/s2n_cbc.c", 74, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %10, label %11, label %15, !dbg !1772, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume !($i9 == 1);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.01 = phi %struct.s2n_hmac_state* [ %14, %11 ], [ %7, %3 ], !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %16 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p14 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %17 = load i32, i32* %16, align 8, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i15 := $load.i32($M.6.shadow,$p14);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %18 = zext i8 20 to i32, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i16 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %19 = icmp ugt i32 %17, %18, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i17 := $ugt.i32($i15,$i16);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %20 = zext i1 %19 to i32, !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i18 := $zext.i1.i32($i17);
  assume {:sourceloc "tls/s2n_cbc.c", 83, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %20), !dbg !1787, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i18);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 47} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1795, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p19 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 47} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = load i32, i32* %21, align 8, !dbg !1795, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i20 := $load.i32($M.6.shadow,$p19);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = zext i8 20 to i32, !dbg !1798, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i21 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 85, 52} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = sub i32 %22, %23, !dbg !1800, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i22 := $sub.i32($i20,$i21);
  call {:cexpr "payload_and_padding_size"} boogie_si_record_i32($i22);
  assume {:sourceloc "tls/s2n_cbc.c", 86, 48} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %25 = icmp sle i32 %24, 1004, !dbg !1805, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i23 := $sle.i32($i22,1004);
  assume {:sourceloc "tls/s2n_cbc.c", 86, 48} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = zext i1 %25 to i32, !dbg !1805, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i24 := $zext.i1.i32($i23);
  assume {:sourceloc "tls/s2n_cbc.c", 86, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %26), !dbg !1808, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assert($i24);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 57} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1810, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p25 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 57} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = load i32, i32* %27, align 8, !dbg !1810, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i26 := $load.i32($M.6.shadow,$p25);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 62} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = sub i32 %28, 1, !dbg !1813, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i27 := $sub.i32($i26,1);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = zext i32 %29 to i64, !dbg !1815, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i28 := $zext.i32.i64($i27);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %31 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1817, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p29 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 89, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = load i8*, i8** %31, align 8, !dbg !1817, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $p30 := $load.ref($M.5.shadow,$p29);
  assume {:sourceloc "tls/s2n_cbc.c", 89, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = getelementptr inbounds i8, i8* %32, i64 %30, !dbg !1815, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p31 := $add.ref($p30,$mul.ref($i28,1));
  assume {:sourceloc "tls/s2n_cbc.c", 89, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = load i8, i8* %33, align 1, !dbg !1815, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i32 := $load.i8($M.9.shadow,$p31);
  call {:cexpr "padding_length"} boogie_si_record_i8($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 23} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %35 = zext i8 %34 to i32, !dbg !1825, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i33 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %36 = icmp sge i32 %35, 0, !dbg !1827, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i34 := $sge.i32($i33,0);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %37 = zext i1 %36 to i32, !dbg !1827, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i35 := $zext.i1.i32($i34);
  assume {:sourceloc "tls/s2n_cbc.c", 90, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %37), !dbg !1830, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i35);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 23} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %38 = zext i8 %34 to i32, !dbg !1832, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i36 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %39 = icmp slt i32 %38, 256, !dbg !1834, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i37 := $slt.i32($i36,256);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 38} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %40 = zext i1 %39 to i32, !dbg !1834, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i38 := $zext.i1.i32($i37);
  assume {:sourceloc "tls/s2n_cbc.c", 91, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %40), !dbg !1837, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i38);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = zext i8 %34 to i32, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i39 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %42 = sub nsw i32 %24, %41, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i40 := $sub.i32($i22,$i39);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %43 = sub nsw i32 %42, 1, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i41 := $sub.i32($i40,1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %44 = icmp sgt i32 %43, 0, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i42 := $sgt.i32($i41,0);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %44, label %45, label %49, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:branchcond $i42} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i42 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %46 = zext i8 %34 to i32, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i43 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = sub nsw i32 %24, %46, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i44 := $sub.i32($i22,$i43);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %48 = sub nsw i32 %47, 1, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i45 := $sub.i32($i44,1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %50, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i46 := $i45;
  goto $bb6;
$bb5:
  assume !($i42 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %50, !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i46 := 0;
  goto $bb6;
$bb6:
  assume {:sourceloc "tls/s2n_cbc.c", 93, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %51 = phi i32 [ %48, %45 ], [ 0, %49 ], !dbg !1839, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %52 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1853, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p47 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %53 = load i8*, i8** %52, align 8, !dbg !1853, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $p48 := $load.ref($M.5.shadow,$p47);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %54 = call i32 @s2n_hmac_update(%struct.s2n_hmac_state* %1, i8* %53, i32 %51), !dbg !1853, !verifier.code !1744"} true;
  call $i49 := s2n_hmac_update.shadow($p1, $p48, $i46);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %55 = icmp sge i32 %54, 0, !dbg !1853, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i50 := $sge.i32($i49,0);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %56 = zext i1 %55 to i32, !dbg !1853, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i51 := $zext.i1.i32($i50);
  assume {:sourceloc "tls/s2n_cbc.c", 96, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %56), !dbg !1853, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i51);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %57 = call i32 @s2n_hmac_copy(%struct.s2n_hmac_state* %.01, %struct.s2n_hmac_state* %1), !dbg !1860, !verifier.code !1744"} true;
  call $i52 := s2n_hmac_copy.shadow($p10, $p1);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %58 = icmp sge i32 %57, 0, !dbg !1860, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i53 := $sge.i32($i52,0);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %59 = zext i1 %58 to i32, !dbg !1860, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i54 := $zext.i1.i32($i53);
  assume {:sourceloc "tls/s2n_cbc.c", 97, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %59), !dbg !1860, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i54);
  assume true;
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %60 = zext i8 20 to i64, !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i55 := $zext.i8.i64(20);
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %61 = icmp ule i64 %60, 64, !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i56 := $ule.i64($i55,64);
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %62 = zext i1 %61 to i32, !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i57 := $zext.i1.i32($i56);
  assume {:sourceloc "tls/s2n_cbc.c", 101, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %62), !dbg !1868, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i57);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %63 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0, !dbg !1873, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p58 := $p3;
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %64 = zext i8 20 to i32, !dbg !1873, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i59 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %65 = call i32 @s2n_hmac_digest_two_compression_rounds(%struct.s2n_hmac_state* %1, i8* %63, i32 %64), !dbg !1873, !verifier.code !1744"} true;
  call $i60 := s2n_hmac_digest_two_compression_rounds.shadow($p1, $p58, $i59);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %66 = icmp sge i32 %65, 0, !dbg !1873, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i61 := $sge.i32($i60,0);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %67 = zext i1 %66 to i32, !dbg !1873, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i62 := $zext.i1.i32($i61);
  assume {:sourceloc "tls/s2n_cbc.c", 102, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %67), !dbg !1873, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i62);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 58} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %68 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1880, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p63 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 104, 58} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %69 = load i8*, i8** %68, align 8, !dbg !1880, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $p64 := $load.ref($M.5.shadow,$p63);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 63} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %70 = sext i32 %51 to i64, !dbg !1883, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i65 := $sext.i32.i64($i46);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 63} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %71 = getelementptr inbounds i8, i8* %69, i64 %70, !dbg !1883, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p66 := $add.ref($p64,$mul.ref($i65,1));
  assume {:sourceloc "tls/s2n_cbc.c", 104, 81} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %72 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0, !dbg !1886, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p67 := $p3;
  assume {:sourceloc "tls/s2n_cbc.c", 104, 95} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %73 = zext i8 20 to i32, !dbg !1888, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i68 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %74 = call i32 @s2n_constant_time_equals(i8* %71, i8* %72, i32 %73), !dbg !1890, !verifier.code !1744"} true;
  call $i69 := s2n_constant_time_equals.shadow($p66, $p67, $i68);
  assume {:sourceloc "tls/s2n_cbc.c", 104, 112} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %75 = xor i32 %74, 1, !dbg !1892, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i70 := $xor.i32($i69,1);
  call {:cexpr "mismatches"} boogie_si_record_i32($i70);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %76 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 0, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p71 := $p2;
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %77 = load i8*, i8** %76, align 8, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $p72 := $load.ref($M.5.shadow,$p71);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %78 = sext i32 %51 to i64, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i73 := $sext.i32.i64($i46);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %79 = getelementptr inbounds i8, i8* %77, i64 %78, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p74 := $add.ref($p72,$mul.ref($i73,1));
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %80 = zext i8 20 to i32, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i75 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %81 = sext i32 %80 to i64, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i76 := $sext.i32.i64($i75);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.sum = add i64 %78, %81, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i77 := $add.i64($i73,$i76);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %82 = getelementptr inbounds i8, i8* %77, i64 %.sum, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p78 := $add.ref($p72,$mul.ref($i77,1));
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %83 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %2, i32 0, i32 1, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p79 := $add.ref($p2,8);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %84 = load i32, i32* %83, align 8, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i80 := $load.i32($M.6.shadow,$p79);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %85 = sub i32 %84, %51, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i81 := $sub.i32($i80,$i46);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %86 = zext i8 20 to i32, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i82 := $zext.i8.i32(20);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %87 = sub i32 %85, %86, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i83 := $sub.i32($i81,$i82);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %88 = sub i32 %87, 1, !dbg !1897, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i84 := $sub.i32($i83,1);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %89 = call i32 @s2n_hmac_update(%struct.s2n_hmac_state* %.01, i8* %82, i32 %88), !dbg !1897, !verifier.code !1744"} true;
  call $i85 := s2n_hmac_update.shadow($p10, $p78, $i84);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %90 = icmp sge i32 %89, 0, !dbg !1897, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i86 := $sge.i32($i85,0);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %91 = zext i1 %90 to i32, !dbg !1897, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i87 := $zext.i1.i32($i86);
  assume {:sourceloc "tls/s2n_cbc.c", 107, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %91), !dbg !1897, !verifier.code !1788"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i87);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %92 = sub nsw i32 %24, 1, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i88 := $sub.i32($i22,1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %93 = icmp slt i32 255, %92, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i89 := $slt.i32(255,$i88);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %93, label %94, label %95, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:branchcond $i89} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i89 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %97, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i90 := 255;
  goto $bb9;
$bb8:
  assume !($i89 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %96 = sub nsw i32 %24, 1, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i91 := $sub.i32($i22,1);
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %97, !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i90 := $i91;
  goto $bb9;
$bb9:
  assume {:sourceloc "tls/s2n_cbc.c", 115, 17} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %98 = phi i32 [ 255, %94 ], [ %96, %95 ], !dbg !1916, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "tls/s2n_cbc.c", 117, 26} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %99 = zext i8 %34 to i32, !dbg !1926, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i92 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 117, 24} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %100 = sub nsw i32 %98, %99, !dbg !1928, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i93 := $sub.i32($i90,$i92);
  call {:cexpr "cutoff"} boogie_si_record_i32($i93);
  assume {:sourceloc "tls/s2n_cbc.c", 118, 68} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %101 = zext i8 %34 to i32, !dbg !1933, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i94 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 118, 18} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %102 = call i32 @double_loop(i32 %75, %struct.s2n_blob* %2, i32 %98, i32 %100, i32 %101), !dbg !1935, !verifier.code !1744"} true;
  call $i95 := double_loop.shadow($i70, $p2, $i90, $i93, $i94);
  call {:cexpr "mismatches"} boogie_si_record_i32($i95);
  assume {:sourceloc "tls/s2n_cbc.c", 126, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %103 = icmp ne i32 %102, 0, !dbg !1938, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i96 := $ne.i32($i95,0);
  assume {:sourceloc "tls/s2n_cbc.c", 126, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %103, label %104, label %109, !dbg !1941, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:branchcond $i96} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i96 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %105, !dbg !1943, !llvm.loop !1945, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  goto $bb13;
$bb11:
  assume {:sourceloc "tls/s2n_cbc.c", 126, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %103, label %104, label %109, !dbg !1941, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume !($i96 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "tls/s2n_cbc.c", 130, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %110, !dbg !1959, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i97 := 0;
  goto $bb16;
$bb13:
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %106, !dbg !1947, !llvm.loop !1949, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  goto $bb14;
$bb14:
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.31, i32 0, i32 0), i8** @s2n_debug_str, align 8, !dbg !1951, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.0.shadow := $store.ref($M.0.shadow,s2n_debug_str,.str.31);
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 335544343, i32* @s2n_errno, align 4, !dbg !1951, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.0.shadow := $store.i32($M.0.shadow,s2n_errno,335544343);
  call {:cexpr "s2n_errno"} boogie_si_record_i32(335544343);
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %107, !dbg !1951, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  goto $bb15;
$bb15:
  assume {:sourceloc "tls/s2n_cbc.c", 127, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %110, !dbg !1947, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i97 := $sub.i32(0,1);
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ -1, %107 ], [ 0, %109 ], !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "tls/s2n_cbc.c", 131, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.0, !dbg !1962, !verifier.code !1744"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := $i97;
  $exn.shadow := false;
  return;
}
const s2n_hmac_update: ref;
axiom (s2n_hmac_update == $sub.ref(0,23189));
procedure {:inline 1} {:cost_modeling} s2n_hmac_update($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 55} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p3 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 55} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = load i16, i16* %4, align 4, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i4 := $load.i16($M.1,$p3);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 48} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = zext i16 %5 to i32, !dbg !1777, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i5 := $zext.i16.i32($i4);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = urem i32 %2, %6, !dbg !1779, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i6 := $urem.i32($i2,$i5);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1781, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p7 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = load i32, i32* %8, align 4, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i8 := $load.i32($M.1,$p7);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = add i32 %9, %7, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i9 := $add.i32($i8,$i6);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %10, i32* %8, align 4, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p7,$i9);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1787, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p10 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = load i16, i16* %11, align 4, !dbg !1787, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i11 := $load.i16($M.1,$p10);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = zext i16 %12 to i32, !dbg !1790, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i12 := $zext.i16.i32($i11);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1792, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p13 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i32, i32* %14, align 4, !dbg !1794, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i14 := $load.i32($M.1,$p13);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = urem i32 %15, %13, !dbg !1794, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i15 := $urem.i32($i14,$i12);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %16, i32* %14, align 4, !dbg !1794, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p13,$i15);
  assume {:sourceloc "crypto/s2n_hmac.c", 247, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1798, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p16 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 247, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %17, i8* %1, i32 %2), !dbg !1800, !verifier.code !1764"} true;
  call $i17 := s2n_hash_update($p16, $p1, $i2);
  assume {:sourceloc "crypto/s2n_hmac.c", 247, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %18, !dbg !1802, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := $i17;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hmac_update.shadow($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 55} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p3 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 55} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = load i16, i16* %4, align 4, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i4 := $load.i16($M.1.shadow,$p3);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 48} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = zext i16 %5 to i32, !dbg !1777, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i5 := $zext.i16.i32($i4);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = urem i32 %2, %6, !dbg !1779, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i6 := $urem.i32($i2,$i5);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1781, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p7 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = load i32, i32* %8, align 4, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i8 := $load.i32($M.1.shadow,$p7);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = add i32 %9, %7, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i9 := $add.i32($i8,$i6);
  assume {:sourceloc "crypto/s2n_hmac.c", 244, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %10, i32* %8, align 4, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p7,$i9);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1787, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p10 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = load i16, i16* %11, align 4, !dbg !1787, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i11 := $load.i16($M.1.shadow,$p10);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = zext i16 %12 to i32, !dbg !1790, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i12 := $zext.i16.i32($i11);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1792, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p13 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i32, i32* %14, align 4, !dbg !1794, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i14 := $load.i32($M.1.shadow,$p13);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = urem i32 %15, %13, !dbg !1794, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i15 := $urem.i32($i14,$i12);
  assume {:sourceloc "crypto/s2n_hmac.c", 245, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %16, i32* %14, align 4, !dbg !1794, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p13,$i15);
  assume {:sourceloc "crypto/s2n_hmac.c", 247, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1798, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p16 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 247, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %17, i8* %1, i32 %2), !dbg !1800, !verifier.code !1764"} true;
  call $i17 := s2n_hash_update.shadow($p16, $p1, $i2);
  assume {:sourceloc "crypto/s2n_hmac.c", 247, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %18, !dbg !1802, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := $i17;
  $exn.shadow := false;
  return;
}
const s2n_hmac_copy: ref;
axiom (s2n_hmac_copy == $sub.ref(0,24221));
procedure {:inline 1} {:cost_modeling} s2n_hmac_copy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %3 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 0, !dbg !1770, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p2 := $p1;
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = load i32, i32* %3, align 4, !dbg !1770, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i3 := $load.i32($M.1,$p2);
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 0, !dbg !1774, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p4 := $p0;
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %4, i32* %5, align 4, !dbg !1776, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p4,$i3);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 1, !dbg !1778, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p5 := $add.ref($p1,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = load i16, i16* %6, align 4, !dbg !1778, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i6 := $load.i16($M.1,$p5);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1781, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p7 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 %7, i16* %8, align 4, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i16($M.1,$p7,$i6);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 2, !dbg !1785, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p8 := $add.ref($p1,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = load i32, i32* %9, align 4, !dbg !1785, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i9 := $load.i32($M.1,$p8);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1788, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p10 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %10, i32* %11, align 4, !dbg !1790, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i32($M.1,$p10,$i9);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 3, !dbg !1792, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p11 := $add.ref($p1,12);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = load i16, i16* %12, align 4, !dbg !1792, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i12 := $load.i16($M.1,$p11);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 3, !dbg !1795, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p13 := $add.ref($p0,12);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 %13, i16* %14, align 4, !dbg !1797, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i16($M.1,$p13,$i12);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 29} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 4, !dbg !1799, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p14 := $add.ref($p1,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 29} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = load i8, i8* %15, align 2, !dbg !1799, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i15 := $load.i8($M.1,$p14);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 4, !dbg !1802, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p16 := $add.ref($p0,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %16, i8* %17, align 2, !dbg !1804, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $M.1 := $store.i8($M.1,$p16,$i15);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1806, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p17 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 5, !dbg !1806, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p18 := $add.ref($p1,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %18, %struct.s2n_hash_state* %19), !dbg !1806, !verifier.code !1764"} true;
  call $i19 := s2n_hash_copy($p17, $p18);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %21 = icmp sge i32 %20, 0, !dbg !1806, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i20 := $sge.i32($i19,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %22 = zext i1 %21 to i32, !dbg !1806, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i21 := $zext.i1.i32($i20);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %22), !dbg !1806, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i21);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 6, !dbg !1814, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p22 := $add.ref($p0,24);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 6, !dbg !1814, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p23 := $add.ref($p1,24);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %23, %struct.s2n_hash_state* %24), !dbg !1814, !verifier.code !1764"} true;
  call $i24 := s2n_hash_copy($p22, $p23);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = icmp sge i32 %25, 0, !dbg !1814, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i25 := $sge.i32($i24,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %27 = zext i1 %26 to i32, !dbg !1814, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i26 := $zext.i1.i32($i25);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %27), !dbg !1814, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i26);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1821, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p27 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 7, !dbg !1821, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p28 := $add.ref($p1,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %28, %struct.s2n_hash_state* %29), !dbg !1821, !verifier.code !1764"} true;
  call $i29 := s2n_hash_copy($p27, $p28);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %31 = icmp sge i32 %30, 0, !dbg !1821, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i30 := $sge.i32($i29,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %32 = zext i1 %31 to i32, !dbg !1821, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i31 := $zext.i1.i32($i30);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %32), !dbg !1821, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i31);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 8, !dbg !1828, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p32 := $add.ref($p0,40);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 8, !dbg !1828, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p33 := $add.ref($p1,40);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %33, %struct.s2n_hash_state* %34), !dbg !1828, !verifier.code !1764"} true;
  call $i34 := s2n_hash_copy($p32, $p33);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %36 = icmp sge i32 %35, 0, !dbg !1828, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i35 := $sge.i32($i34,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %37 = zext i1 %36 to i32, !dbg !1828, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i36 := $zext.i1.i32($i35);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %37), !dbg !1828, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i36);
  assume {:sourceloc "crypto/s2n_hmac.c", 331, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1835, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hmac_copy.shadow($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %3 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 0, !dbg !1770, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p2 := $p1;
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = load i32, i32* %3, align 4, !dbg !1770, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i3 := $load.i32($M.1.shadow,$p2);
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 0, !dbg !1774, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p4 := $p0;
  assume {:sourceloc "crypto/s2n_hmac.c", 316, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %4, i32* %5, align 4, !dbg !1776, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p4,$i3);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 1, !dbg !1778, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p5 := $add.ref($p1,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = load i16, i16* %6, align 4, !dbg !1778, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i6 := $load.i16($M.1.shadow,$p5);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1781, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p7 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 317, 25} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 %7, i16* %8, align 4, !dbg !1783, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i16($M.1.shadow,$p7,$i6);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 2, !dbg !1785, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p8 := $add.ref($p1,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = load i32, i32* %9, align 4, !dbg !1785, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i9 := $load.i32($M.1.shadow,$p8);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1788, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p10 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 318, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %10, i32* %11, align 4, !dbg !1790, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i32($M.1.shadow,$p10,$i9);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 3, !dbg !1792, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p11 := $add.ref($p1,12);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 30} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = load i16, i16* %12, align 4, !dbg !1792, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i12 := $load.i16($M.1.shadow,$p11);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 3, !dbg !1795, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p13 := $add.ref($p0,12);
  assume {:sourceloc "crypto/s2n_hmac.c", 319, 22} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i16 %13, i16* %14, align 4, !dbg !1797, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i16($M.1.shadow,$p13,$i12);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 29} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 4, !dbg !1799, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p14 := $add.ref($p1,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 29} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = load i8, i8* %15, align 2, !dbg !1799, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i15 := $load.i8($M.1.shadow,$p14);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 4, !dbg !1802, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p16 := $add.ref($p0,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 320, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i8 %16, i8* %17, align 2, !dbg !1804, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $M.1.shadow := $store.i8($M.1.shadow,$p16,$i15);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1806, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p17 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 5, !dbg !1806, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p18 := $add.ref($p1,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %18, %struct.s2n_hash_state* %19), !dbg !1806, !verifier.code !1764"} true;
  call $i19 := s2n_hash_copy.shadow($p17, $p18);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %21 = icmp sge i32 %20, 0, !dbg !1806, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i20 := $sge.i32($i19,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %22 = zext i1 %21 to i32, !dbg !1806, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i21 := $zext.i1.i32($i20);
  assume {:sourceloc "crypto/s2n_hmac.c", 322, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %22), !dbg !1806, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i21);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 6, !dbg !1814, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p22 := $add.ref($p0,24);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 6, !dbg !1814, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p23 := $add.ref($p1,24);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %23, %struct.s2n_hash_state* %24), !dbg !1814, !verifier.code !1764"} true;
  call $i24 := s2n_hash_copy.shadow($p22, $p23);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = icmp sge i32 %25, 0, !dbg !1814, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i25 := $sge.i32($i24,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %27 = zext i1 %26 to i32, !dbg !1814, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i26 := $zext.i1.i32($i25);
  assume {:sourceloc "crypto/s2n_hmac.c", 323, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %27), !dbg !1814, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i26);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1821, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p27 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 7, !dbg !1821, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p28 := $add.ref($p1,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %28, %struct.s2n_hash_state* %29), !dbg !1821, !verifier.code !1764"} true;
  call $i29 := s2n_hash_copy.shadow($p27, $p28);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %31 = icmp sge i32 %30, 0, !dbg !1821, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i30 := $sge.i32($i29,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %32 = zext i1 %31 to i32, !dbg !1821, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i31 := $zext.i1.i32($i30);
  assume {:sourceloc "crypto/s2n_hmac.c", 324, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %32), !dbg !1821, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i31);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 8, !dbg !1828, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p32 := $add.ref($p0,40);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %1, i32 0, i32 8, !dbg !1828, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p33 := $add.ref($p1,40);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %33, %struct.s2n_hash_state* %34), !dbg !1828, !verifier.code !1764"} true;
  call $i34 := s2n_hash_copy.shadow($p32, $p33);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %36 = icmp sge i32 %35, 0, !dbg !1828, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i35 := $sge.i32($i34,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %37 = zext i1 %36 to i32, !dbg !1828, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i36 := $zext.i1.i32($i35);
  assume {:sourceloc "crypto/s2n_hmac.c", 325, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %37), !dbg !1828, !verifier.code !1810"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i36);
  assume {:sourceloc "crypto/s2n_hmac.c", 331, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1835, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := 0;
  $exn.shadow := false;
  return;
}
const s2n_hmac_digest_two_compression_rounds: ref;
axiom (s2n_hmac_digest_two_compression_rounds == $sub.ref(0,25253));
procedure {:inline 1} {:cost_modeling} s2n_hmac_digest_two_compression_rounds($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i13: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = call i32 @s2n_hmac_digest(%struct.s2n_hmac_state* %0, i8* %1, i32 %2), !dbg !1773, !verifier.code !1764"} true;
  call $i3 := s2n_hmac_digest($p0, $p1, $i2);
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %5 = icmp sge i32 %4, 0, !dbg !1773, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i4 := $sge.i32($i3,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %6 = zext i1 %5 to i32, !dbg !1773, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %6), !dbg !1773, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i5);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1780, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p6 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = load i32, i32* %7, align 4, !dbg !1780, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i7 := $load.i32($M.1,$p6);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1784, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p8 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = load i16, i16* %9, align 4, !dbg !1784, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i9 := $load.i16($M.1,$p8);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 43} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = zext i16 %10 to i32, !dbg !1787, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i10 := $zext.i16.i32($i9);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 66} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = sub nsw i32 %11, 9, !dbg !1789, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i11 := $sub.i32($i10,9);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 40} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = icmp ugt i32 %8, %12, !dbg !1791, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i12 := $ugt.i32($i7,$i11);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %13, label %14, label %15, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  assume {:sourceloc "crypto/s2n_hmac.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %27, !dbg !1795, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i13 := 0;
  goto $bb3;
$bb2:
  assume !($i12 == 1);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1798, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p14 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = call i32 @s2n_hash_reset(%struct.s2n_hash_state* %16), !dbg !1798, !verifier.code !1764"} true;
  call $i15 := s2n_hash_reset($p14);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %18 = icmp sge i32 %17, 0, !dbg !1798, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i16 := $sge.i32($i15,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %19 = zext i1 %18 to i32, !dbg !1798, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i17 := $zext.i1.i32($i16);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %19), !dbg !1798, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i17);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1804, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p18 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 9, !dbg !1806, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p19 := $add.ref($p0,48);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 9, i32 0, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p20 := $add.ref($p0,48);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 66} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1809, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p21 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 66} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = load i16, i16* %23, align 4, !dbg !1809, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i22 := $load.i16($M.1,$p21);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 59} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = zext i16 %24 to i32, !dbg !1812, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i23 := $zext.i16.i32($i22);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %20, i8* %22, i32 %25), !dbg !1814, !verifier.code !1764"} true;
  call $i24 := s2n_hash_update($p18, $p20, $i23);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %27, !dbg !1816, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i13 := $i24;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ 0, %14 ], [ %26, %15 ], !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 279, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.0, !dbg !1819, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := $i13;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hmac_digest_two_compression_rounds.shadow($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i13: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = call i32 @s2n_hmac_digest(%struct.s2n_hmac_state* %0, i8* %1, i32 %2), !dbg !1773, !verifier.code !1764"} true;
  call $i3 := s2n_hmac_digest.shadow($p0, $p1, $i2);
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %5 = icmp sge i32 %4, 0, !dbg !1773, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i4 := $sge.i32($i3,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %6 = zext i1 %5 to i32, !dbg !1773, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "crypto/s2n_hmac.c", 262, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %6), !dbg !1773, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i5);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 2, !dbg !1780, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p6 := $add.ref($p0,8);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = load i32, i32* %7, align 4, !dbg !1780, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i7 := $load.i32($M.1.shadow,$p6);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1784, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p8 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = load i16, i16* %9, align 4, !dbg !1784, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i9 := $load.i16($M.1.shadow,$p8);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 43} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = zext i16 %10 to i32, !dbg !1787, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i10 := $zext.i16.i32($i9);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 66} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = sub nsw i32 %11, 9, !dbg !1789, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i11 := $sub.i32($i10,9);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 40} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = icmp ugt i32 %8, %12, !dbg !1791, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i12 := $ugt.i32($i7,$i11);
  assume {:sourceloc "crypto/s2n_hmac.c", 270, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %13, label %14, label %15, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  assume {:sourceloc "crypto/s2n_hmac.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %27, !dbg !1795, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i13 := 0;
  goto $bb3;
$bb2:
  assume !($i12 == 1);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1798, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p14 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = call i32 @s2n_hash_reset(%struct.s2n_hash_state* %16), !dbg !1798, !verifier.code !1764"} true;
  call $i15 := s2n_hash_reset.shadow($p14);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %18 = icmp sge i32 %17, 0, !dbg !1798, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i16 := $sge.i32($i15,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %19 = zext i1 %18 to i32, !dbg !1798, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i17 := $zext.i1.i32($i16);
  assume {:sourceloc "crypto/s2n_hmac.c", 275, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %19), !dbg !1798, !verifier.code !1775"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i17);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1804, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p18 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 50} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 9, !dbg !1806, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p19 := $add.ref($p0,48);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 9, i32 0, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p20 := $add.ref($p0,48);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 66} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 1, !dbg !1809, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p21 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 66} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = load i16, i16* %23, align 4, !dbg !1809, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i22 := $load.i16($M.1.shadow,$p21);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 59} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = zext i16 %24 to i32, !dbg !1812, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i23 := $zext.i16.i32($i22);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %20, i8* %22, i32 %25), !dbg !1814, !verifier.code !1764"} true;
  call $i24 := s2n_hash_update.shadow($p18, $p20, $i23);
  assume {:sourceloc "crypto/s2n_hmac.c", 278, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %27, !dbg !1816, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i13 := $i24;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ 0, %14 ], [ %26, %15 ], !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 279, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.0, !dbg !1819, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := $i13;
  $exn.shadow := false;
  return;
}
const s2n_constant_time_equals: ref;
axiom (s2n_constant_time_equals == $sub.ref(0,26285));
procedure {:inline 1} {:cost_modeling} s2n_constant_time_equals($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
requires {:public_in $i2} true;
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $loop_l: i32;
$bb0:
  assume {:sourceloc "utils/s2n_safety.c", 60, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %2), !dbg !1755, !verifier.code !1746"} true;
  call {:name $i2} $p3 := __SMACK_value.i32($i2);
  assume $isExternal($p3);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p3);
  assume {:sourceloc "utils/s2n_safety.c", 60, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %4), !dbg !1755, !verifier.code !1746"} true;
  assume {:sourceloc "utils/s2n_safety.c", 63, 10} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %5, !dbg !1765, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i4 := 0;
  $i5 := 0;
  $loop_l := $l;
  goto $bb1;
$bb1:
  assert ($l == ($loop_l + ($i5 * (10 + 1))));
  assert {:loopinvariant} contr_expr($i2,$i5,$M.0,$M.1,$M.2,$M.3,$M.4,$M.5,$M.6,$M.7,$M.8,$M.9,$M.10);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.01 = phi i8 [ 0, %3 ], [ %20, %21 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ 0, %3 ], [ %22, %21 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "utils/s2n_safety.c", 63, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = icmp ult i32 %.0, %2, !dbg !1770, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i6 := $ult.i32($i5,$i2);
  assume {:sourceloc "utils/s2n_safety.c", 63, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %6, label %7, label %23, !dbg !1773, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:branchcond $i6} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i6 == 1);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = call i1 @contr_expr(i32 %2, i32 %.0), !verifier.code !1746"} true;
  assume {:sourceloc "utils/s2n_safety.c", 66, 9} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__CONTRACT_invariant(i1 zeroext %8), !dbg !1776, !verifier.code !1778"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = sext i32 %.0 to i64, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i8 := $sext.i32.i64($i5);
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = getelementptr inbounds i8, i8* %0, i64 %9, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p9 := $add.ref($p0,$mul.ref($i8,1));
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = load i8, i8* %10, align 1, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i10 := $load.i8($M.9,$p9);
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = zext i8 %11 to i32, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i11 := $zext.i8.i32($i10);
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = sext i32 %.0 to i64, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i12 := $sext.i32.i64($i5);
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds i8, i8* %1, i64 %13, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p13 := $add.ref($p1,$mul.ref($i12,1));
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i8, i8* %14, align 1, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i14 := $load.i8($M.10,$p13);
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = zext i8 %15 to i32, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i15 := $zext.i8.i32($i14);
  assume {:sourceloc "utils/s2n_safety.c", 67, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = xor i32 %12, %16, !dbg !1790, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i16 := $xor.i32($i11,$i15);
  assume {:sourceloc "utils/s2n_safety.c", 67, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = zext i8 %.01 to i32, !dbg !1792, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i17 := $zext.i8.i32($i4);
  assume {:sourceloc "utils/s2n_safety.c", 67, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = or i32 %18, %17, !dbg !1792, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i18 := $or.i32($i17,$i16);
  assume {:sourceloc "utils/s2n_safety.c", 67, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = trunc i32 %19 to i8, !dbg !1792, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i19 := $trunc.i32.i8($i18);
  call {:cexpr "xor"} boogie_si_record_i8($i19);
  assume {:sourceloc "utils/s2n_safety.c", 68, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %21, !dbg !1797, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  goto $bb4;
$bb3:
  assume !($i6 == 1);
  assume {:sourceloc "utils/s2n_safety.c", 70, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = icmp ne i8 %.01, 0, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i21 := $ne.i8($i4,0);
  assume {:sourceloc "utils/s2n_safety.c", 70, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = xor i1 %24, true, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i22 := $xor.i1($i21,1);
  assume {:sourceloc "utils/s2n_safety.c", 70, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = zext i1 %25 to i32, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i23 := $zext.i1.i32($i22);
  assume {:sourceloc "utils/s2n_safety.c", 70, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %26, !dbg !1810, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := $i23;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "utils/s2n_safety.c", 63, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = add nsw i32 %.0, 1, !dbg !1799, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i20 := $add.i32($i5,1);
  call {:cexpr "i"} boogie_si_record_i32($i20);
  assume {:sourceloc "utils/s2n_safety.c", 63, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %5, !dbg !1802, !llvm.loop !1803, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i4 := $i19;
  $i5 := $i20;
  goto $bb1;
}
procedure {:inline 1} {:cost_modeling} s2n_constant_time_equals.shadow($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
requires {:public_in $i2} true;
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $loop_l: i32;
$bb0:
  assume {:sourceloc "utils/s2n_safety.c", 60, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = call %union.anon.1* (i32, ...) bitcast (%union.anon.1* (...)* @__SMACK_value to %union.anon.1* (i32, ...)*)(i32 %2), !dbg !1755, !verifier.code !1746"} true;
  call {:name $i2} $p3 := __SMACK_value.i32($i2);
  assume $isExternal($p3);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p3);
  assume {:sourceloc "utils/s2n_safety.c", 60, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @public_in(%union.anon.1* %4), !dbg !1755, !verifier.code !1746"} true;
  assume {:sourceloc "utils/s2n_safety.c", 63, 10} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %5, !dbg !1765, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i4 := 0;
  $i5 := 0;
  $loop_l := $l.shadow;
  goto $bb1;
$bb1:
  assert ($l.shadow == ($loop_l + ($i5 * (10 + 1))));
  assert {:loopinvariant} contr_expr($i2,$i5,$M.0.shadow,$M.1.shadow,$M.2.shadow,$M.3.shadow,$M.4.shadow,$M.5.shadow,$M.6.shadow,$M.7.shadow,$M.8.shadow,$M.9.shadow,$M.10.shadow);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.01 = phi i8 [ 0, %3 ], [ %20, %21 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ 0, %3 ], [ %22, %21 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "utils/s2n_safety.c", 63, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = icmp ult i32 %.0, %2, !dbg !1770, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i6 := $ult.i32($i5,$i2);
  assume {:sourceloc "utils/s2n_safety.c", 63, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %6, label %7, label %23, !dbg !1773, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:branchcond $i6} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i6 == 1);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = call i1 @contr_expr(i32 %2, i32 %.0), !verifier.code !1746"} true;
  assume {:sourceloc "utils/s2n_safety.c", 66, 9} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__CONTRACT_invariant(i1 zeroext %8), !dbg !1776, !verifier.code !1778"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = sext i32 %.0 to i64, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i8 := $sext.i32.i64($i5);
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = getelementptr inbounds i8, i8* %0, i64 %9, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p9 := $add.ref($p0,$mul.ref($i8,1));
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = load i8, i8* %10, align 1, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i10 := $load.i8($M.9.shadow,$p9);
  assume {:sourceloc "utils/s2n_safety.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = zext i8 %11 to i32, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i11 := $zext.i8.i32($i10);
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = sext i32 %.0 to i64, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i12 := $sext.i32.i64($i5);
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds i8, i8* %1, i64 %13, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p13 := $add.ref($p1,$mul.ref($i12,1));
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i8, i8* %14, align 1, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i14 := $load.i8($M.10.shadow,$p13);
  assume {:sourceloc "utils/s2n_safety.c", 67, 23} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = zext i8 %15 to i32, !dbg !1785, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i15 := $zext.i8.i32($i14);
  assume {:sourceloc "utils/s2n_safety.c", 67, 21} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = xor i32 %12, %16, !dbg !1790, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i16 := $xor.i32($i11,$i15);
  assume {:sourceloc "utils/s2n_safety.c", 67, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = zext i8 %.01 to i32, !dbg !1792, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i17 := $zext.i8.i32($i4);
  assume {:sourceloc "utils/s2n_safety.c", 67, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = or i32 %18, %17, !dbg !1792, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i18 := $or.i32($i17,$i16);
  assume {:sourceloc "utils/s2n_safety.c", 67, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = trunc i32 %19 to i8, !dbg !1792, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i19 := $trunc.i32.i8($i18);
  call {:cexpr "xor"} boogie_si_record_i8($i19);
  assume {:sourceloc "utils/s2n_safety.c", 68, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %21, !dbg !1797, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  goto $bb4;
$bb3:
  assume !($i6 == 1);
  assume {:sourceloc "utils/s2n_safety.c", 70, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = icmp ne i8 %.01, 0, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i21 := $ne.i8($i4,0);
  assume {:sourceloc "utils/s2n_safety.c", 70, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = xor i1 %24, true, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i22 := $xor.i1($i21,1);
  assume {:sourceloc "utils/s2n_safety.c", 70, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = zext i1 %25 to i32, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i23 := $zext.i1.i32($i22);
  assume {:sourceloc "utils/s2n_safety.c", 70, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %26, !dbg !1810, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := $i23;
  $exn.shadow := false;
  return;
$bb4:
  assume {:sourceloc "utils/s2n_safety.c", 63, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = add nsw i32 %.0, 1, !dbg !1799, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i20 := $add.i32($i5,1);
  call {:cexpr "i"} boogie_si_record_i32($i20);
  assume {:sourceloc "utils/s2n_safety.c", 63, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %5, !dbg !1802, !llvm.loop !1803, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i4 := $i19;
  $i5 := $i20;
  goto $bb1;
}
const double_loop: ref;
axiom (double_loop == $sub.ref(0,27317));
procedure {:inline 1} {:cost_modeling} double_loop($i0: i32, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i21: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $loop_l: i32;
$bb0:
  assume {:sourceloc "tls/s2n_cbc.c", 38, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p5 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %7 = load i32, i32* %6, align 8, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i6 := $load.i32($M.6,$p5);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %8 = icmp uge i32 %7, 0, !dbg !1766, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i7 := $uge.i32($i6,0);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %9 = zext i1 %8 to i32, !dbg !1766, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %9), !dbg !1769, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assert($i8);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %10 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1771, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p9 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %11 = load i32, i32* %10, align 8, !dbg !1771, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i10 := $load.i32($M.6,$p9);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = icmp ule i32 %11, 1024, !dbg !1774, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i11 := $ule.i32($i10,1024);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %13 = zext i1 %12 to i32, !dbg !1774, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i12 := $zext.i1.i32($i11);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %13), !dbg !1777, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assert($i12);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1786, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p13 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i32, i32* %14, align 8, !dbg !1786, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i14 := $load.i32($M.6,$p13);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = sub i32 %15, 1, !dbg !1789, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i15 := $sub.i32($i14,1);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 43} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = sub i32 %16, %2, !dbg !1791, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i16 := $sub.i32($i15,$i2);
  call {:cexpr "j"} boogie_si_record_i32($i16);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 8} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !dbg !1796, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i17 := $i0;
  $i18 := 0;
  $i19 := $i16;
  $loop_l := $l;
  goto $bb1;
$bb1:
  assert ($l == ($loop_l + ($i18 * (15 + 3))));
  assert {:loopinvariant} contr_expr.2($i2,$p1,$i18,$i19,$M.0,$M.1,$M.2,$M.3,$M.4,$M.5,$M.6,$M.7,$M.8,$M.9,$M.10);
  assert {:loopinvariant} contr_expr.1($i2,$i18,$M.0,$M.1,$M.2,$M.3,$M.4,$M.5,$M.6,$M.7,$M.8,$M.9,$M.10);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.02 = phi i32 [ %0, %5 ], [ %44, %45 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.01 = phi i32 [ 0, %5 ], [ %46, %45 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ %17, %5 ], [ %47, %45 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = icmp slt i32 %.01, %2, !dbg !1801, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i20 := $slt.i32($i18,$i2);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 62} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %19, label %20, label %24, !dbg !1804, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i21 := 0;
  assume {:branchcond $i20} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i20 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 80} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p22 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 80} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = load i32, i32* %21, align 8, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i23 := $load.i32($M.6,$p22);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 67} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = icmp ult i32 %.0, %22, !dbg !1809, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i24 := $ult.i32($i19,$i23);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %24, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i21 := $i24;
  goto $bb4;
$bb3:
  assume {:sourceloc "tls/s2n_cbc.c", 41, 62} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %19, label %20, label %24, !dbg !1804, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume !($i20 == 1);
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = phi i1 [ false, %18 ], [ %23, %20 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %25, label %26, label %48, !dbg !1813, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:branchcond $i21} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i21 == 1);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = call i1 @contr_expr.1(i32 %2, i32 %.01), !verifier.code !1746"} true;
  assume {:sourceloc "tls/s2n_cbc.c", 42, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__CONTRACT_invariant(i1 zeroext %27), !dbg !1816, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = call i1 @contr_expr.2(i32 %2, %struct.s2n_blob* %1, i32 %.01, i32 %.0), !verifier.code !1746"} true;
  assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__CONTRACT_invariant(i1 zeroext %28), !dbg !1820, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = icmp sge i32 %.01, %3, !dbg !1822, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i27 := $sge.i32($i18,$i3);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = zext i1 %29 to i32, !dbg !1822, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i28 := $zext.i1.i32($i27);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 45} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %31 = mul nsw i32 %30, 8, !dbg !1825, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i29 := $mul.i32($i28,8);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 27} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = shl i32 255, %31, !dbg !1827, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i30 := $shl.i32(255,$i29);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = xor i32 %32, -1, !dbg !1829, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i31 := $xor.i32($i30,$sub.i32(0,1));
  assume {:sourceloc "tls/s2n_cbc.c", 44, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = trunc i32 %33 to i8, !dbg !1829, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i32 := $trunc.i32.i8($i31);
  call {:cexpr "mask"} boogie_si_record_i8($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = sext i32 %.0 to i64, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i33 := $sext.i32.i64($i19);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %36 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 0, !dbg !1837, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p34 := $p1;
  assume {:sourceloc "tls/s2n_cbc.c", 45, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %37 = load i8*, i8** %36, align 8, !dbg !1837, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $p35 := $load.ref($M.5,$p34);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %38 = getelementptr inbounds i8, i8* %37, i64 %35, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p36 := $add.ref($p35,$mul.ref($i33,1));
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %39 = load i8, i8* %38, align 1, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i37 := $load.i8($M.9,$p36);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %40 = zext i8 %39 to i32, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i38 := $zext.i8.i32($i37);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = xor i32 %40, %4, !dbg !1843, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i39 := $xor.i32($i38,$i4);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 59} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %42 = zext i8 %34 to i32, !dbg !1845, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i40 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 57} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %43 = and i32 %41, %42, !dbg !1847, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i41 := $and.i32($i39,$i40);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %44 = or i32 %.02, %43, !dbg !1849, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i42 := $or.i32($i17,$i41);
  call {:cexpr "mismatches"} boogie_si_record_i32($i42);
  assume {:sourceloc "tls/s2n_cbc.c", 46, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %45, !dbg !1852, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  goto $bb7;
$bb6:
  assume !($i21 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 47, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.02, !dbg !1864, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := $i17;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "tls/s2n_cbc.c", 41, 87} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %46 = add nsw i32 %.01, 1, !dbg !1854, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i43 := $add.i32($i18,1);
  call {:cexpr "i"} boogie_si_record_i32($i43);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 92} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = add nsw i32 %.0, 1, !dbg !1857, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i44 := $add.i32($i19,1);
  call {:cexpr "j"} boogie_si_record_i32($i44);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !dbg !1860, !llvm.loop !1861, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i17 := $i42;
  $i18 := $i43;
  $i19 := $i44;
  goto $bb1;
}
procedure {:inline 1} {:cost_modeling} double_loop.shadow($i0: i32, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i21: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $loop_l: i32;
$bb0:
  assume {:sourceloc "tls/s2n_cbc.c", 38, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p5 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %7 = load i32, i32* %6, align 8, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i6 := $load.i32($M.6.shadow,$p5);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %8 = icmp uge i32 %7, 0, !dbg !1766, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i7 := $uge.i32($i6,0);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %9 = zext i1 %8 to i32, !dbg !1766, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "tls/s2n_cbc.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %9), !dbg !1769, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assert($i8);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %10 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1771, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p9 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 32} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %11 = load i32, i32* %10, align 8, !dbg !1771, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i10 := $load.i32($M.6.shadow,$p9);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = icmp ule i32 %11, 1024, !dbg !1774, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i11 := $ule.i32($i10,1024);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 37} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %13 = zext i1 %12 to i32, !dbg !1774, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i12 := $zext.i1.i32($i11);
  assume {:sourceloc "tls/s2n_cbc.c", 39, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %13), !dbg !1777, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assert($i12);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1786, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p13 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i32, i32* %14, align 8, !dbg !1786, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i14 := $load.i32($M.6.shadow,$p13);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = sub i32 %15, 1, !dbg !1789, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i15 := $sub.i32($i14,1);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 43} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = sub i32 %16, %2, !dbg !1791, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i16 := $sub.i32($i15,$i2);
  call {:cexpr "j"} boogie_si_record_i32($i16);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 8} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !dbg !1796, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i17 := $i0;
  $i18 := 0;
  $i19 := $i16;
  $loop_l := $l.shadow;
  goto $bb1;
$bb1:
  assert ($l.shadow == ($loop_l + ($i18 * (15 + 3))));
  assert {:loopinvariant} contr_expr.2($i2,$p1,$i18,$i19,$M.0.shadow,$M.1.shadow,$M.2.shadow,$M.3.shadow,$M.4.shadow,$M.5.shadow,$M.6.shadow,$M.7.shadow,$M.8.shadow,$M.9.shadow,$M.10.shadow);
  assert {:loopinvariant} contr_expr.1($i2,$i18,$M.0.shadow,$M.1.shadow,$M.2.shadow,$M.3.shadow,$M.4.shadow,$M.5.shadow,$M.6.shadow,$M.7.shadow,$M.8.shadow,$M.9.shadow,$M.10.shadow);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.02 = phi i32 [ %0, %5 ], [ %44, %45 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.01 = phi i32 [ 0, %5 ], [ %46, %45 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ %17, %5 ], [ %47, %45 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = icmp slt i32 %.01, %2, !dbg !1801, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i20 := $slt.i32($i18,$i2);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 62} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %19, label %20, label %24, !dbg !1804, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i21 := 0;
  assume {:branchcond $i20} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i20 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 80} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p22 := $add.ref($p1,8);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 80} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = load i32, i32* %21, align 8, !dbg !1806, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i23 := $load.i32($M.6.shadow,$p22);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 67} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = icmp ult i32 %.0, %22, !dbg !1809, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i24 := $ult.i32($i19,$i23);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %24, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i21 := $i24;
  goto $bb4;
$bb3:
  assume {:sourceloc "tls/s2n_cbc.c", 41, 62} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %19, label %20, label %24, !dbg !1804, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume !($i20 == 1);
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %25 = phi i1 [ false, %18 ], [ %23, %20 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %25, label %26, label %48, !dbg !1813, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:branchcond $i21} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i21 == 1);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = call i1 @contr_expr.1(i32 %2, i32 %.01), !verifier.code !1746"} true;
  assume {:sourceloc "tls/s2n_cbc.c", 42, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__CONTRACT_invariant(i1 zeroext %27), !dbg !1816, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = call i1 @contr_expr.2(i32 %2, %struct.s2n_blob* %1, i32 %.01, i32 %.0), !verifier.code !1746"} true;
  assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__CONTRACT_invariant(i1 zeroext %28), !dbg !1820, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = icmp sge i32 %.01, %3, !dbg !1822, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i27 := $sge.i32($i18,$i3);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %30 = zext i1 %29 to i32, !dbg !1822, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i28 := $zext.i1.i32($i27);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 45} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %31 = mul nsw i32 %30, 8, !dbg !1825, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i29 := $mul.i32($i28,8);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 27} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = shl i32 255, %31, !dbg !1827, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i30 := $shl.i32(255,$i29);
  assume {:sourceloc "tls/s2n_cbc.c", 44, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %33 = xor i32 %32, -1, !dbg !1829, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i31 := $xor.i32($i30,$sub.i32(0,1));
  assume {:sourceloc "tls/s2n_cbc.c", 44, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %34 = trunc i32 %33 to i8, !dbg !1829, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i32 := $trunc.i32.i8($i31);
  call {:cexpr "mask"} boogie_si_record_i8($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = sext i32 %.0 to i64, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i33 := $sext.i32.i64($i19);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %36 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 0, !dbg !1837, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p34 := $p1;
  assume {:sourceloc "tls/s2n_cbc.c", 45, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %37 = load i8*, i8** %36, align 8, !dbg !1837, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $p35 := $load.ref($M.5.shadow,$p34);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %38 = getelementptr inbounds i8, i8* %37, i64 %35, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p36 := $add.ref($p35,$mul.ref($i33,1));
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %39 = load i8, i8* %38, align 1, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i37 := $load.i8($M.9.shadow,$p36);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %40 = zext i8 %39 to i32, !dbg !1835, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i38 := $zext.i8.i32($i37);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = xor i32 %40, %4, !dbg !1843, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i39 := $xor.i32($i38,$i4);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 59} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %42 = zext i8 %34 to i32, !dbg !1845, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i40 := $zext.i8.i32($i32);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 57} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %43 = and i32 %41, %42, !dbg !1847, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i41 := $and.i32($i39,$i40);
  assume {:sourceloc "tls/s2n_cbc.c", 45, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %44 = or i32 %.02, %43, !dbg !1849, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i42 := $or.i32($i17,$i41);
  call {:cexpr "mismatches"} boogie_si_record_i32($i42);
  assume {:sourceloc "tls/s2n_cbc.c", 46, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %45, !dbg !1852, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  goto $bb7;
$bb6:
  assume !($i21 == 1);
  assume {:sourceloc "tls/s2n_cbc.c", 47, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.02, !dbg !1864, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := $i17;
  $exn.shadow := false;
  return;
$bb7:
  assume {:sourceloc "tls/s2n_cbc.c", 41, 87} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %46 = add nsw i32 %.01, 1, !dbg !1854, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i43 := $add.i32($i18,1);
  call {:cexpr "i"} boogie_si_record_i32($i43);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 92} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = add nsw i32 %.0, 1, !dbg !1857, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i44 := $add.i32($i19,1);
  call {:cexpr "j"} boogie_si_record_i32($i44);
  assume {:sourceloc "tls/s2n_cbc.c", 41, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !dbg !1860, !llvm.loop !1861, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i17 := $i42;
  $i18 := $i43;
  $i19 := $i44;
  goto $bb1;
}
const __CONTRACT_invariant: ref;
axiom (__CONTRACT_invariant == $sub.ref(0,28349));
const s2n_hmac_digest: ref;
axiom (s2n_hmac_digest == $sub.ref(0,29381));
procedure {:inline 1} {:cost_modeling} s2n_hmac_digest($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p3 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p4 := $add.ref($p0,176);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, i32 0, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p5 := $add.ref($p0,176);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 4, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p6 := $add.ref($p0,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = load i8, i8* %7, align 2, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i7 := $load.i8($M.1,$p6);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = zext i8 %8 to i32, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i8 := $zext.i8.i32($i7);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = call i32 @s2n_hash_digest(%struct.s2n_hash_state* %4, i8* %6, i32 %9), !dbg !1773, !verifier.code !1764"} true;
  call $i9 := s2n_hash_digest($p3, $p5, $i8);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %11 = icmp sge i32 %10, 0, !dbg !1773, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i10 := $sge.i32($i9,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = zext i1 %11 to i32, !dbg !1773, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i11 := $zext.i1.i32($i10);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %12), !dbg !1773, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i11);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1786, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p12 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 8, !dbg !1786, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p13 := $add.ref($p0,40);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %13, %struct.s2n_hash_state* %14), !dbg !1786, !verifier.code !1764"} true;
  call $i14 := s2n_hash_copy($p12, $p13);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %16 = icmp sge i32 %15, 0, !dbg !1786, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i15 := $sge.i32($i14,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %17 = zext i1 %16 to i32, !dbg !1786, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %17), !dbg !1786, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i16);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p17 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p18 := $add.ref($p0,176);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, i32 0, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p19 := $add.ref($p0,176);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 4, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p20 := $add.ref($p0,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = load i8, i8* %21, align 2, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i21 := $load.i8($M.1,$p20);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = zext i8 %22 to i32, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l := $add.i32($l,1);
  $i22 := $zext.i8.i32($i21);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %18, i8* %20, i32 %23), !dbg !1793, !verifier.code !1764"} true;
  call $i23 := s2n_hash_update($p17, $p19, $i22);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %25 = icmp sge i32 %24, 0, !dbg !1793, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i24 := $sge.i32($i23,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = zext i1 %25 to i32, !dbg !1793, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $i25 := $zext.i1.i32($i24);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %26), !dbg !1793, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  call __VERIFIER_assume($i25);
  assume {:sourceloc "crypto/s2n_hmac.c", 256, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1804, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $p26 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 256, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = call i32 @s2n_hash_digest(%struct.s2n_hash_state* %27, i8* %1, i32 %2), !dbg !1806, !verifier.code !1764"} true;
  call $i27 := s2n_hash_digest($p26, $p1, $i2);
  assume {:sourceloc "crypto/s2n_hmac.c", 256, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %28, !dbg !1808, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l := $add.i32($l,0);
  $r := $i27;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hmac_digest.shadow($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 5, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p3 := $add.ref($p0,16);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p4 := $add.ref($p0,176);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, i32 0, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p5 := $add.ref($p0,176);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 4, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p6 := $add.ref($p0,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = load i8, i8* %7, align 2, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i7 := $load.i8($M.1.shadow,$p6);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %9 = zext i8 %8 to i32, !dbg !1773, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i8 := $zext.i8.i32($i7);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = call i32 @s2n_hash_digest(%struct.s2n_hash_state* %4, i8* %6, i32 %9), !dbg !1773, !verifier.code !1764"} true;
  call $i9 := s2n_hash_digest.shadow($p3, $p5, $i8);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %11 = icmp sge i32 %10, 0, !dbg !1773, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i10 := $sge.i32($i9,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = zext i1 %11 to i32, !dbg !1773, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i11 := $zext.i1.i32($i10);
  assume {:sourceloc "crypto/s2n_hmac.c", 252, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %12), !dbg !1773, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i11);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1786, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p12 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 8, !dbg !1786, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p13 := $add.ref($p0,40);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = call i32 @s2n_hash_copy(%struct.s2n_hash_state* %13, %struct.s2n_hash_state* %14), !dbg !1786, !verifier.code !1764"} true;
  call $i14 := s2n_hash_copy.shadow($p12, $p13);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %16 = icmp sge i32 %15, 0, !dbg !1786, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i15 := $sge.i32($i14,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %17 = zext i1 %16 to i32, !dbg !1786, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "crypto/s2n_hmac.c", 253, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %17), !dbg !1786, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i16);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p17 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p18 := $add.ref($p0,176);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 10, i32 0, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p19 := $add.ref($p0,176);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 4, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p20 := $add.ref($p0,14);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = load i8, i8* %21, align 2, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i21 := $load.i8($M.1.shadow,$p20);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = zext i8 %22 to i32, !dbg !1793, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $l.shadow := $add.i32($l.shadow,1);
  $i22 := $zext.i8.i32($i21);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %18, i8* %20, i32 %23), !dbg !1793, !verifier.code !1764"} true;
  call $i23 := s2n_hash_update.shadow($p17, $p19, $i22);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %25 = icmp sge i32 %24, 0, !dbg !1793, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i24 := $sge.i32($i23,0);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = zext i1 %25 to i32, !dbg !1793, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $i25 := $zext.i1.i32($i24);
  assume {:sourceloc "crypto/s2n_hmac.c", 254, 5} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assume(i32 %26), !dbg !1793, !verifier.code !1782"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  call __VERIFIER_assume($i25);
  assume {:sourceloc "crypto/s2n_hmac.c", 256, 36} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %27 = getelementptr inbounds %struct.s2n_hmac_state, %struct.s2n_hmac_state* %0, i32 0, i32 7, !dbg !1804, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $p26 := $add.ref($p0,32);
  assume {:sourceloc "crypto/s2n_hmac.c", 256, 12} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %28 = call i32 @s2n_hash_digest(%struct.s2n_hash_state* %27, i8* %1, i32 %2), !dbg !1806, !verifier.code !1764"} true;
  call $i27 := s2n_hash_digest.shadow($p26, $p1, $i2);
  assume {:sourceloc "crypto/s2n_hmac.c", 256, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %28, !dbg !1808, !verifier.code !1764"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $l.shadow := $add.i32($l.shadow,0);
  $r := $i27;
  $exn.shadow := false;
  return;
}
const s2n_hash_reset: ref;
axiom (s2n_hash_reset == $sub.ref(0,30413));
procedure {:inline 1} {:cost_modeling} s2n_hash_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "crypto/s2n_hash.c", 149, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1755, !verifier.code !1756"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l := $add.i32($l,0);
  assume {:sourceloc "crypto/s2n_hash.c", 150, 10} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %2 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1759, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p1 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 150, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 0, i32* %2, align 4, !dbg !1761, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1 := $store.i32($M.1,$p1,0);
  assume {:sourceloc "crypto/s2n_hash.c", 151, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1763, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hash_reset.shadow($p0: ref) returns ($r: i32)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "crypto/s2n_hash.c", 149, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1755, !verifier.code !1756"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "crypto/s2n_hash.c", 150, 10} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %2 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1759, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p1 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 150, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 0, i32* %2, align 4, !dbg !1761, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1.shadow := $store.i32($M.1.shadow,$p1,0);
  assume {:sourceloc "crypto/s2n_hash.c", 151, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1763, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn.shadow := false;
  return;
}
const s2n_hash_update: ref;
axiom (s2n_hash_update == $sub.ref(0,31445));
procedure {:inline 1} {:cost_modeling} s2n_hash_update($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hash.c", 95, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %4 = icmp uge i32 %2, 0, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i3 := $uge.i32($i2,0);
  assume {:sourceloc "crypto/s2n_hash.c", 95, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %5 = zext i1 %4 to i32, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "crypto/s2n_hash.c", 95, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %5), !dbg !1766, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i4);
  assume {:sourceloc "crypto/s2n_hash.c", 96, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %6 = icmp ule i32 %2, 1024, !dbg !1768, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i5 := $ule.i32($i2,1024);
  assume {:sourceloc "crypto/s2n_hash.c", 96, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %7 = zext i1 %6 to i32, !dbg !1768, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "crypto/s2n_hash.c", 96, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %7), !dbg !1771, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i6);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1773, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p7 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %9 = load i32, i32* %8, align 4, !dbg !1773, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i8 := $load.i32($M.1,$p7);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %10 = icmp slt i32 %9, 64, !dbg !1776, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i9 := $slt.i32($i8,64);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %11 = zext i1 %10 to i32, !dbg !1776, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i10 := $zext.i1.i32($i9);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %11), !dbg !1779, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i10);
  assume {:sourceloc "crypto/s2n_hash.c", 105, 44} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = mul i32 1, %2, !dbg !1781, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i11 := $mul.i32(1,$i2);
  assume {:sourceloc "crypto/s2n_hash.c", 105, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 %12), !dbg !1783, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE($i11);
  $l := $add.i32($l,$i11);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1785, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p12 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = load i32, i32* %13, align 4, !dbg !1787, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i13 := $load.i32($M.1,$p12);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = add i32 %14, %2, !dbg !1787, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i14 := $add.i32($i13,$i2);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %15, i32* %13, align 4, !dbg !1787, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1 := $store.i32($M.1,$p12,$i14);
  assume {:sourceloc "crypto/s2n_hash.c", 108, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1791, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p15 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 108, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = load i32, i32* %16, align 4, !dbg !1791, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i16 := $load.i32($M.1,$p15);
  assume {:sourceloc "crypto/s2n_hash.c", 108, 28} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = call i32 @num_blocks(i32 %17), !dbg !1794, !verifier.code !1752"} true;
  call $i17 := num_blocks($i16);
  call {:cexpr "num_filled_blocks"} boogie_si_record_i32($i17);
  assume {:sourceloc "crypto/s2n_hash.c", 109, 48} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %19 = mul nsw i32 %18, 1000, !dbg !1799, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i18 := $mul.i32($i17,1000);
  assume {:sourceloc "crypto/s2n_hash.c", 109, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 %19), !dbg !1801, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE($i18);
  $l := $add.i32($l,$i18);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 44} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1803, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p19 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 44} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = load i32, i32* %20, align 4, !dbg !1803, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i20 := $load.i32($M.1,$p19);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 87} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = mul nsw i32 %18, 64, !dbg !1806, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i21 := $mul.i32($i17,64);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 68} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = sub nsw i32 %21, %22, !dbg !1808, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i22 := $sub.i32($i20,$i21);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1810, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p23 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %23, i32* %24, align 4, !dbg !1812, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1 := $store.i32($M.1,$p23,$i22);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %25 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1814, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p24 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = load i32, i32* %25, align 4, !dbg !1814, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i25 := $load.i32($M.1,$p24);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %27 = icmp slt i32 %26, 64, !dbg !1817, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i26 := $slt.i32($i25,64);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %28 = zext i1 %27 to i32, !dbg !1817, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i27 := $zext.i1.i32($i26);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %28), !dbg !1820, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i27);
  assume {:sourceloc "crypto/s2n_hash.c", 114, 4} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1822, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hash_update.shadow($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
$bb0:
  assume {:sourceloc "crypto/s2n_hash.c", 95, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %4 = icmp uge i32 %2, 0, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i3 := $uge.i32($i2,0);
  assume {:sourceloc "crypto/s2n_hash.c", 95, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %5 = zext i1 %4 to i32, !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "crypto/s2n_hash.c", 95, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %5), !dbg !1766, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i4);
  assume {:sourceloc "crypto/s2n_hash.c", 96, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %6 = icmp ule i32 %2, 1024, !dbg !1768, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i5 := $ule.i32($i2,1024);
  assume {:sourceloc "crypto/s2n_hash.c", 96, 27} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %7 = zext i1 %6 to i32, !dbg !1768, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "crypto/s2n_hash.c", 96, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %7), !dbg !1771, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i6);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1773, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p7 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %9 = load i32, i32* %8, align 4, !dbg !1773, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i8 := $load.i32($M.1.shadow,$p7);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %10 = icmp slt i32 %9, 64, !dbg !1776, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i9 := $slt.i32($i8,64);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %11 = zext i1 %10 to i32, !dbg !1776, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i10 := $zext.i1.i32($i9);
  assume {:sourceloc "crypto/s2n_hash.c", 97, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %11), !dbg !1779, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i10);
  assume {:sourceloc "crypto/s2n_hash.c", 105, 44} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %12 = mul i32 1, %2, !dbg !1781, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i11 := $mul.i32(1,$i2);
  assume {:sourceloc "crypto/s2n_hash.c", 105, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 %12), !dbg !1783, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE($i11);
  $l.shadow := $add.i32($l.shadow,$i11);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %13 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1785, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p12 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = load i32, i32* %13, align 4, !dbg !1787, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i13 := $load.i32($M.1.shadow,$p12);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = add i32 %14, %2, !dbg !1787, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i14 := $add.i32($i13,$i2);
  assume {:sourceloc "crypto/s2n_hash.c", 107, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %15, i32* %13, align 4, !dbg !1787, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1.shadow := $store.i32($M.1.shadow,$p12,$i14);
  assume {:sourceloc "crypto/s2n_hash.c", 108, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1791, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p15 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 108, 46} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = load i32, i32* %16, align 4, !dbg !1791, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i16 := $load.i32($M.1.shadow,$p15);
  assume {:sourceloc "crypto/s2n_hash.c", 108, 28} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %18 = call i32 @num_blocks(i32 %17), !dbg !1794, !verifier.code !1752"} true;
  call $i17 := num_blocks.shadow($i16);
  call {:cexpr "num_filled_blocks"} boogie_si_record_i32($i17);
  assume {:sourceloc "crypto/s2n_hash.c", 109, 48} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %19 = mul nsw i32 %18, 1000, !dbg !1799, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i18 := $mul.i32($i17,1000);
  assume {:sourceloc "crypto/s2n_hash.c", 109, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 %19), !dbg !1801, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE($i18);
  $l.shadow := $add.i32($l.shadow,$i18);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 44} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1803, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p19 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 44} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %21 = load i32, i32* %20, align 4, !dbg !1803, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i20 := $load.i32($M.1.shadow,$p19);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 87} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %22 = mul nsw i32 %18, 64, !dbg !1806, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i21 := $mul.i32($i17,64);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 68} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = sub nsw i32 %21, %22, !dbg !1808, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i22 := $sub.i32($i20,$i21);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %24 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1810, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p23 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 111, 35} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %23, i32* %24, align 4, !dbg !1812, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1.shadow := $store.i32($M.1.shadow,$p23,$i22);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %25 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1814, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p24 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 29} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %26 = load i32, i32* %25, align 4, !dbg !1814, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i25 := $load.i32($M.1.shadow,$p24);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %27 = icmp slt i32 %26, 64, !dbg !1817, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i26 := $slt.i32($i25,64);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 53} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " %28 = zext i1 %27 to i32, !dbg !1817, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i27 := $zext.i1.i32($i26);
  assume {:sourceloc "crypto/s2n_hash.c", 112, 4} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 %28), !dbg !1820, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert($i27);
  assume {:sourceloc "crypto/s2n_hash.c", 114, 4} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1822, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn.shadow := false;
  return;
}
const __VERIFIER_ASSUME_LEAKAGE: ref;
axiom (__VERIFIER_ASSUME_LEAKAGE == $sub.ref(0,32477));
procedure {:inline 1} __VERIFIER_ASSUME_LEAKAGE($i0: i32);
const num_blocks: ref;
axiom (num_blocks == $sub.ref(0,33509));
procedure {:inline 1} {:cost_modeling} num_blocks($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i2: i32;
$bb0:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1749, !verifier.code !1750"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l := $add.i32($l,0);
  assume {:sourceloc "crypto/s2n_hash.c", 64, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %2 = icmp slt i32 %0, 64, !dbg !1753, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i1 := $slt.i32($i0,64);
  assume {:sourceloc "crypto/s2n_hash.c", 64, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %2, label %3, label %4, !dbg !1756, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i1 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 64, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @benign(), !dbg !1758, !verifier.code !1746"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 64, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1761, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 0;
  goto $bb3;
$bb2:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i1 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 65, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = icmp slt i32 %0, 128, !dbg !1763, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i3 := $slt.i32($i0,128);
  assume {:sourceloc "crypto/s2n_hash.c", 65, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %5, label %6, label %7, !dbg !1766, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ 0, %3 ], [ 1, %6 ], [ 2, %9 ], [ 3, %12 ], [ 4, %15 ], [ 5, %18 ], [ 6, %21 ], [ 7, %24 ], [ 8, %27 ], [ 9, %30 ], [ 10, %33 ], [ 11, %36 ], [ 12, %39 ], [ 13, %42 ], [ 14, %45 ], [ 15, %48 ], [ 16, %51 ], [ 17, %54 ], [ undef, %55 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:sourceloc "crypto/s2n_hash.c", 83, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.0, !dbg !1884, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := $i2;
  $exn := false;
  return;
$bb4:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i3 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 65, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1768, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 1;
  goto $bb3;
$bb5:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i3 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 66, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = icmp slt i32 %0, 192, !dbg !1770, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i4 := $slt.i32($i0,192);
  assume {:sourceloc "crypto/s2n_hash.c", 66, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %8, label %9, label %10, !dbg !1773, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i4} true;
  goto $bb6, $bb7;
$bb6:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i4 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 66, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1775, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 2;
  goto $bb3;
$bb7:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i4 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = icmp slt i32 %0, 256, !dbg !1777, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i5 := $slt.i32($i0,256);
  assume {:sourceloc "crypto/s2n_hash.c", 67, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %11, label %12, label %13, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i5} true;
  goto $bb8, $bb9;
$bb8:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i5 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 67, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1782, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 3;
  goto $bb3;
$bb9:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i5 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 68, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = icmp slt i32 %0, 320, !dbg !1784, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i6 := $slt.i32($i0,320);
  assume {:sourceloc "crypto/s2n_hash.c", 68, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %14, label %15, label %16, !dbg !1787, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i6} true;
  goto $bb10, $bb11;
$bb10:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i6 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 68, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1789, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 4;
  goto $bb3;
$bb11:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i6 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 69, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = icmp slt i32 %0, 384, !dbg !1791, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i7 := $slt.i32($i0,384);
  assume {:sourceloc "crypto/s2n_hash.c", 69, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %17, label %18, label %19, !dbg !1794, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i7} true;
  goto $bb12, $bb13;
$bb12:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 69, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1796, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 5;
  goto $bb3;
$bb13:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 70, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = icmp slt i32 %0, 448, !dbg !1798, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i8 := $slt.i32($i0,448);
  assume {:sourceloc "crypto/s2n_hash.c", 70, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %20, label %21, label %22, !dbg !1801, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i8} true;
  goto $bb14, $bb15;
$bb14:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i8 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 70, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1803, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 6;
  goto $bb3;
$bb15:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i8 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 71, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = icmp slt i32 %0, 512, !dbg !1805, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i9 := $slt.i32($i0,512);
  assume {:sourceloc "crypto/s2n_hash.c", 71, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %23, label %24, label %25, !dbg !1808, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i9} true;
  goto $bb16, $bb17;
$bb16:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i9 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 71, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1810, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 7;
  goto $bb3;
$bb17:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i9 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 72, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = icmp slt i32 %0, 576, !dbg !1812, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i10 := $slt.i32($i0,576);
  assume {:sourceloc "crypto/s2n_hash.c", 72, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %26, label %27, label %28, !dbg !1815, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i10} true;
  goto $bb18, $bb19;
$bb18:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i10 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 72, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1817, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 8;
  goto $bb3;
$bb19:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i10 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 73, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = icmp slt i32 %0, 640, !dbg !1819, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i11 := $slt.i32($i0,640);
  assume {:sourceloc "crypto/s2n_hash.c", 73, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %29, label %30, label %31, !dbg !1822, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i11} true;
  goto $bb20, $bb21;
$bb20:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i11 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 73, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1824, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 9;
  goto $bb3;
$bb21:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i11 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 74, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = icmp slt i32 %0, 704, !dbg !1826, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i12 := $slt.i32($i0,704);
  assume {:sourceloc "crypto/s2n_hash.c", 74, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %32, label %33, label %34, !dbg !1829, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i12} true;
  goto $bb22, $bb23;
$bb22:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i12 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 74, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1831, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 10;
  goto $bb3;
$bb23:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i12 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 75, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = icmp slt i32 %0, 768, !dbg !1833, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i13 := $slt.i32($i0,768);
  assume {:sourceloc "crypto/s2n_hash.c", 75, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %35, label %36, label %37, !dbg !1836, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i13} true;
  goto $bb24, $bb25;
$bb24:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i13 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 75, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1838, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 11;
  goto $bb3;
$bb25:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i13 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 76, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %38 = icmp slt i32 %0, 832, !dbg !1840, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i14 := $slt.i32($i0,832);
  assume {:sourceloc "crypto/s2n_hash.c", 76, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %38, label %39, label %40, !dbg !1843, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i14} true;
  goto $bb26, $bb27;
$bb26:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i14 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 76, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1845, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 12;
  goto $bb3;
$bb27:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i14 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 77, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = icmp slt i32 %0, 896, !dbg !1847, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i15 := $slt.i32($i0,896);
  assume {:sourceloc "crypto/s2n_hash.c", 77, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %41, label %42, label %43, !dbg !1850, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i15} true;
  goto $bb28, $bb29;
$bb28:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i15 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 77, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1852, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 13;
  goto $bb3;
$bb29:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i15 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 78, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %44 = icmp slt i32 %0, 960, !dbg !1854, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i16 := $slt.i32($i0,960);
  assume {:sourceloc "crypto/s2n_hash.c", 78, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %44, label %45, label %46, !dbg !1857, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i16} true;
  goto $bb30, $bb31;
$bb30:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i16 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 78, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1859, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 14;
  goto $bb3;
$bb31:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i16 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 79, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = icmp slt i32 %0, 1024, !dbg !1861, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i17 := $slt.i32($i0,1024);
  assume {:sourceloc "crypto/s2n_hash.c", 79, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %47, label %48, label %49, !dbg !1864, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i17} true;
  goto $bb32, $bb33;
$bb32:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i17 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 79, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1866, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 15;
  goto $bb3;
$bb33:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i17 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 80, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %50 = icmp slt i32 %0, 1088, !dbg !1868, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i18 := $slt.i32($i0,1088);
  assume {:sourceloc "crypto/s2n_hash.c", 80, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %50, label %51, label %52, !dbg !1871, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i18} true;
  goto $bb34, $bb35;
$bb34:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i18 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 80, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1873, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 16;
  goto $bb3;
$bb35:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i18 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 81, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %53 = icmp eq i32 %0, 1088, !dbg !1875, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i19 := $eq.i32($i0,1088);
  assume {:sourceloc "crypto/s2n_hash.c", 81, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %53, label %54, label %55, !dbg !1878, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i19} true;
  goto $bb36, $bb37;
$bb36:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i19 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 81, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1880, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 17;
  goto $bb3;
$bb37:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i19 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 82, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 0), !dbg !1882, !verifier.code !1750"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert(0);
  assume {:sourceloc "crypto/s2n_hash.c", 83, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1884, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := $u0;
  goto $bb3;
}
procedure {:inline 1} {:cost_modeling} num_blocks.shadow($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i2: i32;
$bb0:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1749, !verifier.code !1750"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "crypto/s2n_hash.c", 64, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %2 = icmp slt i32 %0, 64, !dbg !1753, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i1 := $slt.i32($i0,64);
  assume {:sourceloc "crypto/s2n_hash.c", 64, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %2, label %3, label %4, !dbg !1756, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i1 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 64, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @benign(), !dbg !1758, !verifier.code !1746"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 64, 41} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1761, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 0;
  goto $bb3;
$bb2:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i1 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 65, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = icmp slt i32 %0, 128, !dbg !1763, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i3 := $slt.i32($i0,128);
  assume {:sourceloc "crypto/s2n_hash.c", 65, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %5, label %6, label %7, !dbg !1766, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ 0, %3 ], [ 1, %6 ], [ 2, %9 ], [ 3, %12 ], [ 4, %15 ], [ 5, %18 ], [ 6, %21 ], [ 7, %24 ], [ 8, %27 ], [ 9, %30 ], [ 10, %33 ], [ 11, %36 ], [ 12, %39 ], [ 13, %42 ], [ 14, %45 ], [ 15, %48 ], [ 16, %51 ], [ 17, %54 ], [ undef, %55 ], !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:sourceloc "crypto/s2n_hash.c", 83, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 %.0, !dbg !1884, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := $i2;
  $exn.shadow := false;
  return;
$bb4:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i3 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 65, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1768, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 1;
  goto $bb3;
$bb5:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i3 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 66, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = icmp slt i32 %0, 192, !dbg !1770, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i4 := $slt.i32($i0,192);
  assume {:sourceloc "crypto/s2n_hash.c", 66, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %8, label %9, label %10, !dbg !1773, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i4} true;
  goto $bb6, $bb7;
$bb6:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i4 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 66, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1775, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 2;
  goto $bb3;
$bb7:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i4 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 67, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = icmp slt i32 %0, 256, !dbg !1777, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i5 := $slt.i32($i0,256);
  assume {:sourceloc "crypto/s2n_hash.c", 67, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %11, label %12, label %13, !dbg !1780, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i5} true;
  goto $bb8, $bb9;
$bb8:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i5 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 67, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1782, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 3;
  goto $bb3;
$bb9:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i5 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 68, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = icmp slt i32 %0, 320, !dbg !1784, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i6 := $slt.i32($i0,320);
  assume {:sourceloc "crypto/s2n_hash.c", 68, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %14, label %15, label %16, !dbg !1787, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i6} true;
  goto $bb10, $bb11;
$bb10:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i6 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 68, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1789, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 4;
  goto $bb3;
$bb11:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i6 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 69, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = icmp slt i32 %0, 384, !dbg !1791, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i7 := $slt.i32($i0,384);
  assume {:sourceloc "crypto/s2n_hash.c", 69, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %17, label %18, label %19, !dbg !1794, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i7} true;
  goto $bb12, $bb13;
$bb12:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 69, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1796, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 5;
  goto $bb3;
$bb13:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 70, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %20 = icmp slt i32 %0, 448, !dbg !1798, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i8 := $slt.i32($i0,448);
  assume {:sourceloc "crypto/s2n_hash.c", 70, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %20, label %21, label %22, !dbg !1801, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i8} true;
  goto $bb14, $bb15;
$bb14:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i8 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 70, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1803, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 6;
  goto $bb3;
$bb15:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i8 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 71, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %23 = icmp slt i32 %0, 512, !dbg !1805, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i9 := $slt.i32($i0,512);
  assume {:sourceloc "crypto/s2n_hash.c", 71, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %23, label %24, label %25, !dbg !1808, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i9} true;
  goto $bb16, $bb17;
$bb16:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i9 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 71, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1810, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 7;
  goto $bb3;
$bb17:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i9 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 72, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %26 = icmp slt i32 %0, 576, !dbg !1812, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i10 := $slt.i32($i0,576);
  assume {:sourceloc "crypto/s2n_hash.c", 72, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %26, label %27, label %28, !dbg !1815, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i10} true;
  goto $bb18, $bb19;
$bb18:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i10 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 72, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1817, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 8;
  goto $bb3;
$bb19:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i10 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 73, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %29 = icmp slt i32 %0, 640, !dbg !1819, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i11 := $slt.i32($i0,640);
  assume {:sourceloc "crypto/s2n_hash.c", 73, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %29, label %30, label %31, !dbg !1822, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i11} true;
  goto $bb20, $bb21;
$bb20:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i11 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 73, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1824, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 9;
  goto $bb3;
$bb21:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i11 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 74, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %32 = icmp slt i32 %0, 704, !dbg !1826, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i12 := $slt.i32($i0,704);
  assume {:sourceloc "crypto/s2n_hash.c", 74, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %32, label %33, label %34, !dbg !1829, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i12} true;
  goto $bb22, $bb23;
$bb22:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i12 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 74, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1831, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 10;
  goto $bb3;
$bb23:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i12 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 75, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %35 = icmp slt i32 %0, 768, !dbg !1833, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i13 := $slt.i32($i0,768);
  assume {:sourceloc "crypto/s2n_hash.c", 75, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %35, label %36, label %37, !dbg !1836, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i13} true;
  goto $bb24, $bb25;
$bb24:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i13 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 75, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1838, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 11;
  goto $bb3;
$bb25:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i13 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 76, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %38 = icmp slt i32 %0, 832, !dbg !1840, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i14 := $slt.i32($i0,832);
  assume {:sourceloc "crypto/s2n_hash.c", 76, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %38, label %39, label %40, !dbg !1843, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i14} true;
  goto $bb26, $bb27;
$bb26:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i14 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 76, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1845, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 12;
  goto $bb3;
$bb27:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i14 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 77, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %41 = icmp slt i32 %0, 896, !dbg !1847, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i15 := $slt.i32($i0,896);
  assume {:sourceloc "crypto/s2n_hash.c", 77, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %41, label %42, label %43, !dbg !1850, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i15} true;
  goto $bb28, $bb29;
$bb28:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i15 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 77, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1852, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 13;
  goto $bb3;
$bb29:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i15 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 78, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %44 = icmp slt i32 %0, 960, !dbg !1854, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i16 := $slt.i32($i0,960);
  assume {:sourceloc "crypto/s2n_hash.c", 78, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %44, label %45, label %46, !dbg !1857, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i16} true;
  goto $bb30, $bb31;
$bb30:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i16 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 78, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1859, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 14;
  goto $bb3;
$bb31:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i16 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 79, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %47 = icmp slt i32 %0, 1024, !dbg !1861, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i17 := $slt.i32($i0,1024);
  assume {:sourceloc "crypto/s2n_hash.c", 79, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %47, label %48, label %49, !dbg !1864, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i17} true;
  goto $bb32, $bb33;
$bb32:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i17 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 79, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1866, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 15;
  goto $bb3;
$bb33:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i17 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 80, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %50 = icmp slt i32 %0, 1088, !dbg !1868, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i18 := $slt.i32($i0,1088);
  assume {:sourceloc "crypto/s2n_hash.c", 80, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %50, label %51, label %52, !dbg !1871, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i18} true;
  goto $bb34, $bb35;
$bb34:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i18 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 80, 33} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1873, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 16;
  goto $bb3;
$bb35:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i18 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 81, 16} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %53 = icmp eq i32 %0, 1088, !dbg !1875, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i19 := $eq.i32($i0,1088);
  assume {:sourceloc "crypto/s2n_hash.c", 81, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %53, label %54, label %55, !dbg !1878, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i19} true;
  goto $bb36, $bb37;
$bb36:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i19 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 81, 34} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1880, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := 17;
  goto $bb3;
$bb37:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i19 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 82, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_assert(i32 0), !dbg !1882, !verifier.code !1750"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_assert(0);
  assume {:sourceloc "crypto/s2n_hash.c", 83, 1} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %56, !dbg !1884, !verifier.code !1746"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i2 := $u0;
  goto $bb3;
}
const benign: ref;
axiom (benign == $sub.ref(0,34541));
const s2n_hash_digest: ref;
axiom (s2n_hash_digest == $sub.ref(0,35573));
procedure {:inline 1} {:cost_modeling} s2n_hash_digest($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i11: i32;
  var $i16: i32;
$bb0:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 119, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l := $add.i32($l,0);
  assume {:sourceloc "crypto/s2n_hash.c", 125, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = add i32 1, 8, !dbg !1772, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i3 := $add.i32(1,8);
  call {:cexpr "min_bytes_to_add"} boogie_si_record_i32($i3);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1775, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p4 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = load i32, i32* %5, align 4, !dbg !1775, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i5 := $load.i32($M.1,$p4);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 37} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = add i32 %6, %4, !dbg !1779, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i6 := $add.i32($i5,$i3);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 56} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = icmp ule i32 %7, 64, !dbg !1781, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i7 := $ule.i32($i6,64);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 6} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %8, label %9, label %13, !dbg !1783, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 129, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @benign(), !dbg !1785, !verifier.code !1752"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 130, 40} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1788, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p8 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 130, 40} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = load i32, i32* %10, align 4, !dbg !1788, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i9 := $load.i32($M.1,$p8);
  assume {:sourceloc "crypto/s2n_hash.c", 130, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = sub nsw i32 64, %11, !dbg !1791, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i10 := $sub.i32(64,$i9);
  call {:cexpr "bytes_to_add"} boogie_si_record_i32($i10);
  assume {:sourceloc "crypto/s2n_hash.c", 131, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !dbg !1796, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i11 := $i10;
  goto $bb3;
$bb2:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1798, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p12 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i32, i32* %14, align 4, !dbg !1798, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i13 := $load.i32($M.1,$p12);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 45} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = sub nsw i32 64, %15, !dbg !1802, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i14 := $sub.i32(64,$i13);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = add nsw i32 64, %16, !dbg !1804, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i15 := $add.i32(64,$i14);
  call {:cexpr "bytes_to_add"} boogie_si_record_i32($i15);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i11 := $i15;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ %12, %9 ], [ %17, %13 ], !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:sourceloc "crypto/s2n_hash.c", 135, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %0, i8* null, i32 %.0), !dbg !1809, !verifier.code !1752"} true;
  call $i16 := s2n_hash_update($p0, $0.ref, $i11);
  assume {:sourceloc "crypto/s2n_hash.c", 136, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1811, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hash_digest.shadow($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i11: i32;
  var $i16: i32;
$bb0:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 119, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1761, !verifier.code !1762"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "crypto/s2n_hash.c", 125, 20} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = add i32 1, 8, !dbg !1772, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i3 := $add.i32(1,8);
  call {:cexpr "min_bytes_to_add"} boogie_si_record_i32($i3);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1775, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p4 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 13} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = load i32, i32* %5, align 4, !dbg !1775, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i5 := $load.i32($M.1.shadow,$p4);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 37} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = add i32 %6, %4, !dbg !1779, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i6 := $add.i32($i5,$i3);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 56} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = icmp ule i32 %7, 64, !dbg !1781, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i7 := $ule.i32($i6,64);
  assume {:sourceloc "crypto/s2n_hash.c", 128, 6} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br i1 %8, label %9, label %13, !dbg !1783, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume ($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 129, 5} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " call void @benign(), !dbg !1785, !verifier.code !1752"} true;
  assume {:sourceloc "crypto/s2n_hash.c", 130, 40} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %10 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1788, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p8 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 130, 40} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %11 = load i32, i32* %10, align 4, !dbg !1788, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i9 := $load.i32($M.1.shadow,$p8);
  assume {:sourceloc "crypto/s2n_hash.c", 130, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %12 = sub nsw i32 64, %11, !dbg !1791, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i10 := $sub.i32(64,$i9);
  call {:cexpr "bytes_to_add"} boogie_si_record_i32($i10);
  assume {:sourceloc "crypto/s2n_hash.c", 131, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !dbg !1796, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i11 := $i10;
  goto $bb3;
$bb2:
  assume {:selfcomp "$bb0", "$bb3"} true;
  assume !($i7 == 1);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %14 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1798, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p12 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 54} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %15 = load i32, i32* %14, align 4, !dbg !1798, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i13 := $load.i32($M.1.shadow,$p12);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 45} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %16 = sub nsw i32 64, %15, !dbg !1802, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i14 := $sub.i32(64,$i13);
  assume {:sourceloc "crypto/s2n_hash.c", 132, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %17 = add nsw i32 64, %16, !dbg !1804, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i15 := $add.i32(64,$i14);
  call {:cexpr "bytes_to_add"} boogie_si_record_i32($i15);
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " br label %18, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $i11 := $i15;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %.0 = phi i32 [ %12, %9 ], [ %17, %13 ], !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  assume {:sourceloc "crypto/s2n_hash.c", 135, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %19 = call i32 @s2n_hash_update(%struct.s2n_hash_state* %0, i8* null, i32 %.0), !dbg !1809, !verifier.code !1752"} true;
  call $i16 := s2n_hash_update.shadow($p0, $0.ref, $i11);
  assume {:sourceloc "crypto/s2n_hash.c", 136, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1811, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn.shadow := false;
  return;
}
const s2n_hash_copy: ref;
axiom (s2n_hash_copy == $sub.ref(0,36605));
procedure {:inline 1} {:cost_modeling} s2n_hash_copy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
$bb0:
  assume {:sourceloc "crypto/s2n_hash.c", 141, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1758, !verifier.code !1759"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l := $add.i32($l,0);
  assume {:sourceloc "crypto/s2n_hash.c", 142, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %3 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %1, i32 0, i32 0, !dbg !1762, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p2 := $p1;
  assume {:sourceloc "crypto/s2n_hash.c", 142, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = load i32, i32* %3, align 4, !dbg !1762, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i3 := $load.i32($M.1,$p2);
  assume {:sourceloc "crypto/s2n_hash.c", 142, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 0, !dbg !1765, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p4 := $p0;
  assume {:sourceloc "crypto/s2n_hash.c", 142, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %4, i32* %5, align 4, !dbg !1767, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1 := $store.i32($M.1,$p4,$i3);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %1, i32 0, i32 1, !dbg !1769, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p5 := $add.ref($p1,4);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = load i32, i32* %6, align 4, !dbg !1769, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i6 := $load.i32($M.1,$p5);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1772, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p7 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %7, i32* %8, align 4, !dbg !1774, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1 := $store.i32($M.1,$p7,$i6);
  assume {:sourceloc "crypto/s2n_hash.c", 144, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1776, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} s2n_hash_copy.shadow($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
$bb0:
  assume {:sourceloc "crypto/s2n_hash.c", 141, 3} true;
  assume {:verifier.code 1} true;
  assume {:smack.LLVMInstructionName " call void @__VERIFIER_ASSUME_LEAKAGE(i32 0), !dbg !1758, !verifier.code !1759"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  call __VERIFIER_ASSUME_LEAKAGE(0);
  $l.shadow := $add.i32($l.shadow,0);
  assume {:sourceloc "crypto/s2n_hash.c", 142, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %3 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %1, i32 0, i32 0, !dbg !1762, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p2 := $p1;
  assume {:sourceloc "crypto/s2n_hash.c", 142, 19} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %4 = load i32, i32* %3, align 4, !dbg !1762, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i3 := $load.i32($M.1.shadow,$p2);
  assume {:sourceloc "crypto/s2n_hash.c", 142, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %5 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 0, !dbg !1765, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p4 := $p0;
  assume {:sourceloc "crypto/s2n_hash.c", 142, 11} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %4, i32* %5, align 4, !dbg !1767, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1.shadow := $store.i32($M.1.shadow,$p4,$i3);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %6 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %1, i32 0, i32 1, !dbg !1769, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p5 := $add.ref($p1,4);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 39} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %7 = load i32, i32* %6, align 4, !dbg !1769, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $i6 := $load.i32($M.1.shadow,$p5);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 7} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " %8 = getelementptr inbounds %struct.s2n_hash_state, %struct.s2n_hash_state* %0, i32 0, i32 1, !dbg !1772, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $p7 := $add.ref($p0,4);
  assume {:sourceloc "crypto/s2n_hash.c", 143, 31} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " store i32 %7, i32* %8, align 4, !dbg !1774, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 1} true;
  $M.1.shadow := $store.i32($M.1.shadow,$p7,$i6);
  assume {:sourceloc "crypto/s2n_hash.c", 144, 3} true;
  assume {:verifier.code 0} true;
  assume {:smack.LLVMInstructionName " ret i32 0, !dbg !1776, !verifier.code !1752"} true;
  assume {:smack.InstTimingCost.Int64 0} true;
  $r := 0;
  $exn.shadow := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0,37637));
procedure {:inline 1} __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume ($i0 != $0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0,38669));
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0,39701));
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0,40733));
procedure {:inline 1} __VERIFIER_assert($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 40, 21} true;
  assume {:verifier.code 1} true;
  assert ($i0 != $0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 42, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0,41765));
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0,42797));
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0,43829));
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0,44861));
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0,45893));
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0,46925));
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0,47957));
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0,48989));
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0,50021));
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0,51053));
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0,52085));
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0,53117));
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0,54149));
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0,55181));
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0,56213));
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0,57245));
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0,58277));
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0,59309));
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0,60341));
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0,61373));
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0,62405));
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0,63437));
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0,64469));
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0,65501));
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0,66533));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) { i }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if (i1 == i2) then 1 else 0) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if (i1 != i2) then 1 else 0) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if (i1 != i2) then 1 else 0) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if (i1 <= i2) then 1 else 0) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if (i1 <= i2) then 1 else 0) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if (i1 < i2) then 1 else 0) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if (i1 >= i2) then 1 else 0) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if (i1 > i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if (i1 <= i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if (i1 < i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if (i1 >= i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if (i1 > i2) then 1 else 0) }
axiom ($xor.i1(0,0) == 0);
axiom ($xor.i1(0,1) == 1);
axiom ($xor.i1(1,0) == 1);
axiom ($xor.i1(1,1) == 0);
axiom ($and.i32(32,16) == 0);
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function $foeq.bool(f1: float, f2: float) returns (bool);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2ui.float.i128(f: float) returns (i128);
function $si2fp.i128.float(i: i128) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2ui.float.i96(f: float) returns (i96);
function $si2fp.i96.float(i: i96) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2ui.float.i88(f: float) returns (i88);
function $si2fp.i88.float(i: i88) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2ui.float.i64(f: float) returns (i64);
function $si2fp.i64.float(i: i64) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2ui.float.i56(f: float) returns (i56);
function $si2fp.i56.float(i: i56) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2ui.float.i48(f: float) returns (i48);
function $si2fp.i48.float(i: i48) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2ui.float.i40(f: float) returns (i40);
function $si2fp.i40.float(i: i40) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2ui.float.i32(f: float) returns (i32);
function $si2fp.i32.float(i: i32) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2ui.float.i24(f: float) returns (i24);
function $si2fp.i24.float(i: i24) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2ui.float.i16(f: float) returns (i16);
function $si2fp.i16.float(i: i16) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2ui.float.i8(f: float) returns (i8);
function $si2fp.i8.float(i: i8) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
axiom (forall f1, f2: float :: ((f1 != f2) || $foeq.bool(f1,f2)));
axiom (forall i: i128 :: ($fp2ui.float.i128($ui2fp.i128.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i128.float($fp2ui.float.i128(f)) == f));
axiom (forall i: i128 :: ($fp2si.float.i128($si2fp.i128.float(i)) == i));
axiom (forall f: float :: ($si2fp.i128.float($fp2si.float.i128(f)) == f));
axiom (forall i: i96 :: ($fp2ui.float.i96($ui2fp.i96.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i96.float($fp2ui.float.i96(f)) == f));
axiom (forall i: i96 :: ($fp2si.float.i96($si2fp.i96.float(i)) == i));
axiom (forall f: float :: ($si2fp.i96.float($fp2si.float.i96(f)) == f));
axiom (forall i: i88 :: ($fp2ui.float.i88($ui2fp.i88.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i88.float($fp2ui.float.i88(f)) == f));
axiom (forall i: i88 :: ($fp2si.float.i88($si2fp.i88.float(i)) == i));
axiom (forall f: float :: ($si2fp.i88.float($fp2si.float.i88(f)) == f));
axiom (forall i: i64 :: ($fp2ui.float.i64($ui2fp.i64.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i64.float($fp2ui.float.i64(f)) == f));
axiom (forall i: i64 :: ($fp2si.float.i64($si2fp.i64.float(i)) == i));
axiom (forall f: float :: ($si2fp.i64.float($fp2si.float.i64(f)) == f));
axiom (forall i: i56 :: ($fp2ui.float.i56($ui2fp.i56.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i56.float($fp2ui.float.i56(f)) == f));
axiom (forall i: i56 :: ($fp2si.float.i56($si2fp.i56.float(i)) == i));
axiom (forall f: float :: ($si2fp.i56.float($fp2si.float.i56(f)) == f));
axiom (forall i: i48 :: ($fp2ui.float.i48($ui2fp.i48.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i48.float($fp2ui.float.i48(f)) == f));
axiom (forall i: i48 :: ($fp2si.float.i48($si2fp.i48.float(i)) == i));
axiom (forall f: float :: ($si2fp.i48.float($fp2si.float.i48(f)) == f));
axiom (forall i: i40 :: ($fp2ui.float.i40($ui2fp.i40.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i40.float($fp2ui.float.i40(f)) == f));
axiom (forall i: i40 :: ($fp2si.float.i40($si2fp.i40.float(i)) == i));
axiom (forall f: float :: ($si2fp.i40.float($fp2si.float.i40(f)) == f));
axiom (forall i: i32 :: ($fp2ui.float.i32($ui2fp.i32.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i32.float($fp2ui.float.i32(f)) == f));
axiom (forall i: i32 :: ($fp2si.float.i32($si2fp.i32.float(i)) == i));
axiom (forall f: float :: ($si2fp.i32.float($fp2si.float.i32(f)) == f));
axiom (forall i: i24 :: ($fp2ui.float.i24($ui2fp.i24.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i24.float($fp2ui.float.i24(f)) == f));
axiom (forall i: i24 :: ($fp2si.float.i24($si2fp.i24.float(i)) == i));
axiom (forall f: float :: ($si2fp.i24.float($fp2si.float.i24(f)) == f));
axiom (forall i: i16 :: ($fp2ui.float.i16($ui2fp.i16.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i16.float($fp2ui.float.i16(f)) == f));
axiom (forall i: i16 :: ($fp2si.float.i16($si2fp.i16.float(i)) == i));
axiom (forall f: float :: ($si2fp.i16.float($fp2si.float.i16(f)) == f));
axiom (forall i: i8 :: ($fp2ui.float.i8($ui2fp.i8.float(i)) == i));
axiom (forall f: float :: ($ui2fp.i8.float($fp2ui.float.i8(f)) == f));
axiom (forall i: i8 :: ($fp2si.float.i8($si2fp.i8.float(i)) == i));
axiom (forall f: float :: ($si2fp.i8.float($fp2si.float.i8(f)) == f));
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p,$EXTERNS_BOTTOM) }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
procedure {:inline 1} boogie_si_record_i8(i: i8);
procedure {:inline 1} boogie_si_record_i32(i: i32);
procedure {:inline 1} boogie_si_record_ref(i: ref);
var $exn: bool;
var $exn.shadow: bool;
procedure {:inline 1} $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}
var $CurrAddr: ref;
procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n,$0.ref);
  if ($sgt.ref.bool(n,$0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr,n),p);
    assume ($sgt.ref.bool($CurrAddr,$0.ref) && $slt.ref.bool($CurrAddr,$MALLOC_TOP));
  } else {
    p := $0.ref;
  }
}
const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0,67565));
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0,68597));
procedure {:inline 1} __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1788, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1793, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0,69629));
const contr_expr: ref;
axiom (contr_expr == $sub.ref(0,70661));
const contr_expr.1: ref;
axiom (contr_expr.1 == $sub.ref(0,71693));
const contr_expr.2: ref;
axiom (contr_expr.2 == $sub.ref(0,72725));
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0,73757));
procedure {:inline 1} {:cost_modeling} __SMACK_static_init()
{
$bb0:
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
procedure {:inline 1} {:cost_modeling} __SMACK_static_init.shadow()
{
$bb0:
  assume {:verifier.code 0} true;
  $exn.shadow := false;
  return;
}
procedure {:inline 1} {:cost_modeling} $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: (($sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len))) ==> (M.ret[x] == val)));
  assume (forall x: ref :: ($slt.ref.bool(x,dst) ==> (M.ret[x] == M[x])));
  assume (forall x: ref :: ($sle.ref.bool($add.ref(dst,len),x) ==> (M.ret[x] == M[x])));
}
procedure {:inline 1} {:cost_modeling} $memset.i8.shadow(M: [ref] i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: (($sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len))) ==> (M.ret[x] == val)));
  assume (forall x: ref :: ($slt.ref.bool(x,dst) ==> (M.ret[x] == M[x])));
  assume (forall x: ref :: ($sle.ref.bool($add.ref(dst,len),x) ==> (M.ret[x] == M[x])));
}
const $u0: i32;
procedure {:inline 1} {:cost_modeling} $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
procedure {:inline 1} {:cost_modeling} $initialize.shadow()
{
  call __SMACK_static_init.shadow();
  call __SMACK_init_func_memory_model();
  return;
}
function {:inline} contr_expr($i0: i32, .0: i32, $M.0: [ref] i8, $M.1: [ref] i8, $M.2: [ref] i32, $M.3: [ref] i32, $M.4: [ref] i8, $M.5: [ref] ref, $M.6: [ref] i32, $M.7: [ref] i32, $M.8: [ref] i8, $M.9: [ref] i8, $M.10: [ref] i8) returns (bool) { |{ var $i1: i1; var $exn: bool; var $r: i1; $bb0: assume {:sourceloc "utils/s2n_safety.c", 66, 9} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %2 = icmp ule i32 %.0, %0, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 1} true; $i1 := $ule.i32(.0,$i0); assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " ret i1 %2, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 0} true; $r := $i1; $exn := false; return ($r != 0); }| }
function {:inline} contr_expr.1($i0: i32, .01: i32, $M.0: [ref] i8, $M.1: [ref] i8, $M.2: [ref] i32, $M.3: [ref] i32, $M.4: [ref] i8, $M.5: [ref] ref, $M.6: [ref] i32, $M.7: [ref] i32, $M.8: [ref] i8, $M.9: [ref] i8, $M.10: [ref] i8) returns (bool) { |{ var $i1: i1; var $exn: bool; var $r: i1; $bb0: assume {:sourceloc "tls/s2n_cbc.c", 42, 5} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %2 = icmp sle i32 %.01, %0, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 1} true; $i1 := $sle.i32(.01,$i0); assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " ret i1 %2, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 0} true; $r := $i1; $exn := false; return ($r != 0); }| }
function {:inline} contr_expr.2($i0: i32, $p1: ref, .01: i32, .0: i32, $M.0: [ref] i8, $M.1: [ref] i8, $M.2: [ref] i32, $M.3: [ref] i32, $M.4: [ref] i8, $M.5: [ref] ref, $M.6: [ref] i32, $M.7: [ref] i32, $M.8: [ref] i8, $M.9: [ref] i8, $M.10: [ref] i8) returns (bool) { |{ var $p2: ref; var $i3: i32; var $i4: i32; var $i5: i32; var $i6: i32; var $i7: i1; var $exn: bool; var $r: i1; $bb0: assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %3 = getelementptr inbounds %struct.s2n_blob, %struct.s2n_blob* %1, i32 0, i32 1, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 0} true; $p2 := $add.ref($p1,8); assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %4 = load i32, i32* %3, align 8, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 1} true; $i3 := $load.i32($M.6,$p2); assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %5 = add i32 %.01, %4, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 1} true; $i4 := $add.i32(.01,$i3); assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %6 = sub i32 %5, %0, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 1} true; $i5 := $sub.i32($i4,$i0); assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %7 = sub i32 %6, 1, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 1} true; $i6 := $sub.i32($i5,1); assume {:sourceloc "tls/s2n_cbc.c", 43, 5} true; assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " %8 = icmp eq i32 %.0, %7, !dbg !1740, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 1} true; $i7 := $eq.i32(.0,$i6); assume {:verifier.code 0} true; assume {:smack.LLVMInstructionName " ret i1 %8, !verifier.code !1747"} true; assume {:smack.InstTimingCost.Int64 0} true; $r := $i7; $exn := false; return ($r != 0); }| }
